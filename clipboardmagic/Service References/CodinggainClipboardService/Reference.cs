//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace clipboardmagic.CodinggainClipboardService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ClipboardConnection.codinggain.org", ConfigurationName="CodinggainClipboardService.ClipboardInterface")]
    public interface ClipboardInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="removeScratchPadItemReturn")]
        bool removeScratchPadItem(int id, string username, string password, int access_key_id, int random_access);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="searchClipboardReturn")]
        clipboardmagic.CodinggainClipboardService.ReturnInterface searchClipboard(string username, string password, string criteria, int access_key_id, int random_access, int segmentnumber);
        
        // CODEGEN: Parameter 'getScratchDatesReturn' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getScratchDatesReturn")]
        clipboardmagic.CodinggainClipboardService.getScratchDatesResponse getScratchDates(clipboardmagic.CodinggainClipboardService.getScratchDatesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getAccessRightsReturn")]
        clipboardmagic.CodinggainClipboardService.EncryptionData getAccessRights(string username, string password, bool encode, int random_access);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="putScratchPadReturn")]
        int putScratchPad(string username, string password, string title, string content, bool important, bool reminder, int access_key_id, int random_access, int lastFileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkCredantialsReturn")]
        bool checkCredantials(string username, string password, int random_access);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="addNewUserReturn")]
        bool addNewUser(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="checkForClipReturn")]
        string checkForClip(string username, string password, int access_key_id, int random_access);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getMaxSizeReturn")]
        int getMaxSize();
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getSegmentsReturn")]
        clipboardmagic.CodinggainClipboardService.ReturnInterface getSegments(string username, string password, int access_key_id, int segment, int random_access);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getClipboardContentReturn")]
        clipboardmagic.CodinggainClipboardService.ReturnInterface getClipboardContent(string username, string password, string from, string to, int access_key_id, int random_access);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="putClipboardContentReturn")]
        bool putClipboardContent(string username, string password, string content, int access_key_id, int random_access);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [return: System.ServiceModel.MessageParameterAttribute(Name="getScratchDataReturn")]
        clipboardmagic.CodinggainClipboardService.ScratchDataInfo getScratchData(string username, string password, int id, int access_key_id, int random_access);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ClipboardConnection.codinggain.org")]
    public partial class ReturnInterface : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool successField;
        
        private string contentField;
        
        private System.Nullable<System.DateTime> dateField;
        
        private int numberOfSegmentsField;
        
        private int segmentNumberField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
                this.RaisePropertyChanged("success");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public string content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
                this.RaisePropertyChanged("content");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int numberOfSegments {
            get {
                return this.numberOfSegmentsField;
            }
            set {
                this.numberOfSegmentsField = value;
                this.RaisePropertyChanged("numberOfSegments");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int segmentNumber {
            get {
                return this.segmentNumberField;
            }
            set {
                this.segmentNumberField = value;
                this.RaisePropertyChanged("segmentNumber");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ClipboardConnection.codinggain.org")]
    public partial class EncryptionData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int encrypt_keyField;
        
        private int access_key_idField;
        
        private System.Nullable<System.DateTime> dateField;
        
        private bool useableField;
        
        private string messageField;
        
        private int maxSizeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int encrypt_key {
            get {
                return this.encrypt_keyField;
            }
            set {
                this.encrypt_keyField = value;
                this.RaisePropertyChanged("encrypt_key");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int access_key_id {
            get {
                return this.access_key_idField;
            }
            set {
                this.access_key_idField = value;
                this.RaisePropertyChanged("access_key_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=2)]
        public System.Nullable<System.DateTime> date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool useable {
            get {
                return this.useableField;
            }
            set {
                this.useableField = value;
                this.RaisePropertyChanged("useable");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
                this.RaisePropertyChanged("message");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int MaxSize {
            get {
                return this.maxSizeField;
            }
            set {
                this.maxSizeField = value;
                this.RaisePropertyChanged("MaxSize");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3163.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ClipboardConnection.codinggain.org")]
    public partial class ScratchDataInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string dateField;
        
        private string usernameField;
        
        private int idField;
        
        private bool containsdataField;
        
        private string contentField;
        
        private string titleField;
        
        private int prev_idField;
        
        private int next_idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public string date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
                this.RaisePropertyChanged("date");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=1)]
        public string username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
                this.RaisePropertyChanged("username");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool containsdata {
            get {
                return this.containsdataField;
            }
            set {
                this.containsdataField = value;
                this.RaisePropertyChanged("containsdata");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=4)]
        public string content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
                this.RaisePropertyChanged("content");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
                this.RaisePropertyChanged("title");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int prev_id {
            get {
                return this.prev_idField;
            }
            set {
                this.prev_idField = value;
                this.RaisePropertyChanged("prev_id");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int next_id {
            get {
                return this.next_idField;
            }
            set {
                this.next_idField = value;
                this.RaisePropertyChanged("next_id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getScratchDates", WrapperNamespace="http://ClipboardConnection.codinggain.org", IsWrapped=true)]
    public partial class getScratchDatesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ClipboardConnection.codinggain.org", Order=0)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ClipboardConnection.codinggain.org", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ClipboardConnection.codinggain.org", Order=2)]
        public int access_key_id;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ClipboardConnection.codinggain.org", Order=3)]
        public int random_access;
        
        public getScratchDatesRequest() {
        }
        
        public getScratchDatesRequest(string username, string password, int access_key_id, int random_access) {
            this.username = username;
            this.password = password;
            this.access_key_id = access_key_id;
            this.random_access = random_access;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getScratchDatesResponse", WrapperNamespace="http://ClipboardConnection.codinggain.org", IsWrapped=true)]
    public partial class getScratchDatesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://ClipboardConnection.codinggain.org", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("getScratchDatesReturn")]
        public clipboardmagic.CodinggainClipboardService.ScratchDataInfo[] getScratchDatesReturn;
        
        public getScratchDatesResponse() {
        }
        
        public getScratchDatesResponse(clipboardmagic.CodinggainClipboardService.ScratchDataInfo[] getScratchDatesReturn) {
            this.getScratchDatesReturn = getScratchDatesReturn;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ClipboardInterfaceChannel : clipboardmagic.CodinggainClipboardService.ClipboardInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClipboardInterfaceClient : System.ServiceModel.ClientBase<clipboardmagic.CodinggainClipboardService.ClipboardInterface>, clipboardmagic.CodinggainClipboardService.ClipboardInterface {
        
        public ClipboardInterfaceClient() {
        }
        
        public ClipboardInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClipboardInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClipboardInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClipboardInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool removeScratchPadItem(int id, string username, string password, int access_key_id, int random_access) {
            return base.Channel.removeScratchPadItem(id, username, password, access_key_id, random_access);
        }
        
        public clipboardmagic.CodinggainClipboardService.ReturnInterface searchClipboard(string username, string password, string criteria, int access_key_id, int random_access, int segmentnumber) {
            return base.Channel.searchClipboard(username, password, criteria, access_key_id, random_access, segmentnumber);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        clipboardmagic.CodinggainClipboardService.getScratchDatesResponse clipboardmagic.CodinggainClipboardService.ClipboardInterface.getScratchDates(clipboardmagic.CodinggainClipboardService.getScratchDatesRequest request) {
            return base.Channel.getScratchDates(request);
        }
        
        public clipboardmagic.CodinggainClipboardService.ScratchDataInfo[] getScratchDates(string username, string password, int access_key_id, int random_access) {
            clipboardmagic.CodinggainClipboardService.getScratchDatesRequest inValue = new clipboardmagic.CodinggainClipboardService.getScratchDatesRequest();
            inValue.username = username;
            inValue.password = password;
            inValue.access_key_id = access_key_id;
            inValue.random_access = random_access;
            clipboardmagic.CodinggainClipboardService.getScratchDatesResponse retVal = ((clipboardmagic.CodinggainClipboardService.ClipboardInterface)(this)).getScratchDates(inValue);
            return retVal.getScratchDatesReturn;
        }
        
        public clipboardmagic.CodinggainClipboardService.EncryptionData getAccessRights(string username, string password, bool encode, int random_access) {
            return base.Channel.getAccessRights(username, password, encode, random_access);
        }
        
        public int putScratchPad(string username, string password, string title, string content, bool important, bool reminder, int access_key_id, int random_access, int lastFileId) {
            return base.Channel.putScratchPad(username, password, title, content, important, reminder, access_key_id, random_access, lastFileId);
        }
        
        public bool checkCredantials(string username, string password, int random_access) {
            return base.Channel.checkCredantials(username, password, random_access);
        }
        
        public bool addNewUser(string username, string password, string email) {
            return base.Channel.addNewUser(username, password, email);
        }
        
        public string checkForClip(string username, string password, int access_key_id, int random_access) {
            return base.Channel.checkForClip(username, password, access_key_id, random_access);
        }
        
        public int getMaxSize() {
            return base.Channel.getMaxSize();
        }
        
        public clipboardmagic.CodinggainClipboardService.ReturnInterface getSegments(string username, string password, int access_key_id, int segment, int random_access) {
            return base.Channel.getSegments(username, password, access_key_id, segment, random_access);
        }
        
        public clipboardmagic.CodinggainClipboardService.ReturnInterface getClipboardContent(string username, string password, string from, string to, int access_key_id, int random_access) {
            return base.Channel.getClipboardContent(username, password, from, to, access_key_id, random_access);
        }
        
        public bool putClipboardContent(string username, string password, string content, int access_key_id, int random_access) {
            return base.Channel.putClipboardContent(username, password, content, access_key_id, random_access);
        }
        
        public clipboardmagic.CodinggainClipboardService.ScratchDataInfo getScratchData(string username, string password, int id, int access_key_id, int random_access) {
            return base.Channel.getScratchData(username, password, id, access_key_id, random_access);
        }
    }
}
