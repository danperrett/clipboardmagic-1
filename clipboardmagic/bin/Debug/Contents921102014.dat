GetScriptVariableInDriverFormat

IEProgramVariable driverProgramVar = new IEProgramVariable();

            if (InformationElement != null)
            {
                driverProgramVar.Direction = (DirectionType)Enum.Parse(typeof(DirectionType), InformationElement.direction);
                driverProgramVar.IEName = InformationElement.Name;
                driverProgramVar.ProtocolMessage = (ProtocolMessageType)Enum.Parse(typeof(ProtocolMessageType), InformationElement.ProtocolMessageType);
            }

            driverProgramVar.Name = Name;
            driverProgramVar.VariableType = (ProgramVariableBase.VariableTypeEnum)VarType;

 IEProgramVariable driverProgramVar = new IEProgramVariable();

            if (InformationElement != null)
            {
                driverProgramVar.Direction = (DirectionType)Enum.Parse(typeof(DirectionType), InformationElement.direction);
                driverProgramVar.IEName = InformationElement.Name;
                driverProgramVar.ProtocolMessage = (ProtocolMessageType)Enum.Parse(typeof(ProtocolMessageType), InformationElement.ProtocolMessageType);
            }

            driverProgramVar.Name = Name;
            driverProgramVar.VariableType = (ProgramVariableBase.VariableTypeEnum)VarType;

((IEVariable)this).InformationElement

StringProgramVariable driverProgramVar = new StringProgramVariable();

            driverProgramVar.Name = Name;
            driverProgramVar.ImplicitConversionType = (StringProgramVariable.ImplicitConversionTypeEnum)this.ImplicitConversionType;

(StringVariable)

progVar = driverProgramVar;

ConvertGUIVariblesToDriverVariables

 Anite.Sequencer.InterfacesCopy.ProgramVariableBase[]

Anite.Sequencer.InterfacesCopy.ProgramVariableBase[] progVars

progVars

ProgramVariableBase

// Add variables to variable dictionary
            foreach (ProgramVariableBase programVariable in _RunCommand.scriptVariables)
            {
                m_SequencerVariables.AddVariable(programVariable);
            }

private SequencerVariables m_SequencerVariables = null;

m_SequencerVariables

messageCounter.LTECount[str]

messageCounter.variableToCountTo[str]

varName

 if (m_SequencerVariables != null)
                                {
                                    EvaluatorVariable variable = null;
                                    m_SequencerVariables.Find(varName, out variable);
                                    if (variable.IsNumeric)
                                    {
                                        variable.AssignValue(messageCounter.LTECount[str].ToString());
                                    }
                                }

assignCountToVariable

messageCounter.LTECount[str]

assignCountToVariable(varName,

m_SequencerVariables

resetMessageCountList();

C:\Development\SASSandboxes\LTE-Interactive-SAS47.0-D\Code\SASLTEInteractiveScriptMode\ScriptElementHandlers\Class1.cs

/*****************************************************************************
 *
 * (C) Anite Telecoms Ltd, 2010. Commercially Confidential.
 *
 * $Author: Dan Perrett (dperrett) $
 * $Date: 2014/01/13 10:35:25GMT $
 * $Revision: 1.2 $
 * $Source: Code/SASLTEInteractiveScriptMode/ScriptElementHandlers/CSFBElementHandler.cs $
 *
 ****************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Anite.Interactive.Utils;
using Anite.Sequencer;
using Anite.Sequencer.Interfaces;

IScriptElementHandler

 ScriptModeEngine ScriptEngine = null;

        SCRIPT_MODE_STATES state = SCRIPT_MODE_STATES.GET_MESAGE;


     public void updateEngine(ScriptModeEngine engine)
        {
            ScriptEngine = engine;
        }

        public void subscribe(object func)
        {
            handoverFunc = (HandoverCellHandler)func;
        }

        public SCRIPT_MODE_EVENT_TYPES RunElement(ElementData data, string cellID)
        {
            InteractiveMTCSFB CSFBData = data as InteractiveMTCSFB;

            timerValue = 6 * 60 * 1000;

            if (handoverFunc != null)
            {
                handoverFunc(CSFBData.CellTo);
                ScriptEngine.setupTimeOut(SCRIPT_MODE_EVENT_TYPES.HANDOVER_COMPLETE, timerValue);
                return SCRIPT_MODE_EVENT_TYPES.HANDOVER_COMPLETE;
            }

            return SCRIPT_MODE_EVENT_TYPES.NONE;
        }

        public void CopyDataTo(ElementData data)
        {
        }

        public SCRIPT_MODE_STATES changeStateTo()
        {
            return state;
        }

        public string GetName()
        {
            return "CSFB ";
        }

        public int GetTimeoutValue()
        {
            return timerValue;
        }

        public TESTVERDICTS GetPassFail()
        {
            return TESTVERDICTS.PASS_VERDICT;
        }

        public TESTSTATUS GetTestStatus()
        {
            return TESTSTATUS.CODE_SUCCESS;
        }

        public string GetErrors()
        {
            return "";
        }

ElementHandler

Anite.InteractiveScriptMode.ScriptElementHandlers

int timerValue = 0;

timerValue

override 

ScriptEngine

override 

ScriptEngine

override 

ScriptEngine

override 

ProgrammingData progData = data as ProgrammingData;

progData.ProgrammingCmdData

Anite.Sequencer

  public override Programming_Cmd_Data GetDataInDriverFormat()
        {
            Programming_Cmd_Data commandData = new Programming_Cmd_Data();
            commandData.programmingData = this.ExpressionData.ConditionExpression;
            commandData.commandType = Command_type_enum.IF;
            commandData.isIEConditionCheck = false;
            commandData.isMsgTypCheck = false;

            if (ExpressionData.VariableMapping != null)
            {
                int numberOfMappings = ExpressionData.VariableMapping.Length;

                for (int index = 0; index < numberOfMappings; index++)
                {
                    if (ExpressionData.VariableMapping[index].IsCondition)
                    {
                        commandData.isIEConditionCheck = true;
                        break;
                    }

                    if (ExpressionData.VariableMapping[index].IsMessageType)
                    {
                        commandData.isMsgTypCheck = true;
                        break;
                    }

                    if (ExpressionData.VariableMapping[index].IsCellIdType)
                    {
                        commandData.isCellIdTypeCheck = true;
                        break;
                    }
                }
            }

            return commandData;
        }

Anite.Sequencer.IFCmdData

ifCmd

Programming_Cmd_Data

C:\Development\SASSandboxes\LTE-Interactive-SAS47.0-D\Code\SequencerScriptDefinitions

C:\Development\SASSandboxes\LTE-Interactive-SAS47.0-D\Code\LTE-InteractiveScript-Editor\Code\SequencerGUI\Schema

L3PPipeMessageHandler: 

testVerdict = TESTVERDICTS.PASS_VERDICT;

        public SCRIPT_MODE_STATES changeStateTo()
        {
            return state;
        }


        SCRIPT_MODE_STATES state = SCRIPT_MODE_STATES.WAIT_EVENT;


        SCRIPT_MODE_STATES state = SCRIPT_MODE_STATES.START;


        SCRIPT_MODE_STATES state = SCRIPT_MODE_STATES.WAIT_EVENT;


        SCRIPT_MODE_STATES state = SCRIPT_MODE_STATES.START;


        SCRIPT_MODE_STATES state = SCRIPT_MODE_STATES.WAIT_EVENT;


   public override void updateEngine(ScriptModeEngine engine)
        {
            ScriptEngine = engine;
        }

for (int n = index; n < scriptElement.Length; n++)
            {

  Type type = scriptElement[n].ElementData.GetType();
                if (type.FullName == "Anite.Sequencer.ProgrammingData")
                {
                    ProgrammingData progData = scriptElement[n].ElementData as ProgrammingData;
                    string tt = progData.ProgrammingCmdData.ToString();

if (tt == "Anite.Sequencer.BEGINInlineSubScriptCmdData")
                    {

else if ((tt == "Anite.Sequencer

FindElseOrEndProgCmds

int next_possible 

   public bool doEvaluation(Sequencer_Struct _SequenceElement)
        {
            SASDebugLogger.TraceLogStart(this, "doEvaluation");

            bool retVal = false;

            Programming_Cmd_Data programmingData = (Programming_Cmd_Data)_SequenceElement.Data;
            string exp = programmingData.programmingData as string;

            // Update timer program variables before evaluating expression.
            // IE program variables don't need to be explicitly updated, as
            // the updates are triggered asynchronously by the arrival of
            // the message containing the relevant IEs.
            //m_TimerProgramVariables.UpdateTimers();

            if (programmingData.isIEConditionCheck)
            {
                mEvaluator.EvaluateIEChecks(exp, ref retVal);

                if (retVal == false)
                {
                    if (exp.Contains(IECheck.NotPresent))
                    {
                        SASDebugLogger.InfoLog("IE NOT PRESENT Condition check (" + exp + ") evaluated to false.");
                    }
                    else if (exp.Contains(IECheck.Present))
                    {
                        SASDebugLogger.InfoLog("IE PRESENT check (" + exp + ") evaluated to false.");
                    }
                }
            }
            else if (programmingData.isMsgTypCheck)
            {
                string[] sp = exp.Split(' ');
                if (sp[1] == "is")
                {
                    EvaluatorVariable evaluatorVariable = null;
                    if (m_SequencerVariables.Find(sp[0].Trim(), out evaluatorVariable))
                    {
                        if (evaluatorVariable.VariableValue == sp[2].Trim())
                        {
                            retVal = true;
                        }
                    }
                }
                else
                {
                    SASDebugLogger.ErrorLog("Msg Type Check is incorrect");
                }
            }
            else if (programmingData.isCellIdTypeCheck)
            {
                string[] sp = exp.Split(' ');
                if (sp[1] == "is")
                {
                     EvaluatorVariable evaluatorVariable = null;
                     if (m_SequencerVariables.Find(sp[0].Trim(), out evaluatorVariable))
                     {
                         string cellValue = evaluatorVariable.VariableValue.Replace("E-Cell ", "");
                         if (cellValue == sp[2].Trim())
                         {
                             retVal = true;
                         }
                     }
                }
            }
            else
            {
                mEvaluator.Evaluate(exp, ref retVal);
            }
            SASDebugLogger.InfoLog("SqDr: Evaluating (" + exp + ") result = " + retVal);

            SASDebugLogger.TraceLogEnd(this, "doEvaluation");

            return retVal;
        }

Programming_Cmd_Data

 private Evaluator mEvaluator = null;

Anite.Sequencer.Variables.

m_SequencerVariables

m_SequencerVariables = SequencerVariables.Instance;

 private SequencerVariables m_SequencerVariables = null;

        m_SequencerVariables = SequencerVariables.Instance;

doEvaluation

There were two new SAS LTE Sequencer elements introduced in SAS46 to ignore the UTRAN/GERAN events. These elements ignore events on all 2G/3G cells. But sometimes it is required to ignore the events on a specific cell and not all cells.

73776

D6BNH-RB7AA-9DJQB-AJ7UF-9MQ8A

version

UL-CCCH-Message.message.rrcConnectionRequest.v3d0NonCriticalExtensions.v4b0NonCriticalExtensions.v590NonCriticalExtensions.v690NonCriticalExtensions.v6b0NonCriticalExtensions.v6e0NonCriticalExtensions.v770NonCriticalExtensions.v7b0NonCriticalExtensions.v860NonCriticalExtensions.rrcConnectionRequest-v860ext.pre-redirectionInfo.supportEUTRA-FDD

UL-CCCH-Message.message.rrcConnectionRequest.v3d0NonCriticalExtensions.v4b0NonCriticalExtensions.v590NonCriticalExtensions.v690NonCriticalExtensions.v6b0NonCriticalExtensions.v6e0NonCriticalExtensions.v770NonCriticalExtensions.v7b0NonCriticalExtensions.v860NonCriticalExtensions.rrcConnectionRequest-v860ext.pre-redirectionInfo.supportEUTRA-TDD

mEvaluator

            mEvaluator = new Evaluator(null);

Anite.Interactive.Utils.SCRIPT_MODE_EVENT_TYPES

  public override Anite.Interactive.Utils.SCRIPT_MODE_EVENT_TYPES RunElement(Anite.Sequencer.ElementData data, string cellID)
        {
            ProgrammingData progData = data as ProgrammingData;
            if(progData != null)
            {
                Anite.Sequencer.IFCmdData ifProg = progData.ProgrammingCmdData as Anite.Sequencer.IFCmdData;
                if (ifProg != null)
                {
                    Programming_Cmd_Data cmdData = GetDataInDriverFormat(ifProg);
                    next_possible = ScriptEngine.FindElseOrEndProgCmds();
                    if (ScriptEngine.doEvaluation(cmdData))
                    {
                    }
                    else
                    {
                        ScriptEngine.SetElementIndex(next_possible);
                    }
                }
            }

            return Anite.Interactive.Utils.SCRIPT_MODE_EVENT_TYPES.ATTACH;
        }

   int next_possible = 0;

        public IFElementHandler()
        {

        }

        public override void updateEngine(ScriptModeEngine engine)
        {
            ScriptEngine = engine;
        }

ELSEIFElementHandler

using Anite.Sequencer;
using Anite.Sequencer.InterfacesCopy;

   public override Programming_Cmd_Data GetDataInDriverFormat()
        {
            Programming_Cmd_Data commandData = new Programming_Cmd_Data();
            commandData.programmingData = this.ExpressionData.ConditionExpression;
            commandData.commandType = Command_type_enum.ELSEIF;
            commandData.isIEConditionCheck = false;
            commandData.isMsgTypCheck = false;

            if (ExpressionData.VariableMapping != null)
            {
                int numberOfMappings = ExpressionData.VariableMapping.Length;

                for (int index = 0; index < numberOfMappings; index++)
                {
                    if (ExpressionData.VariableMapping[index].IsCondition)
                    {
                        commandData.isIEConditionCheck = true;
                        break;
                    }

                    if (ExpressionData.VariableMapping[index].IsMessageType)
                    {
                        commandData.isMsgTypCheck = true;
                        break;
                    }

                    if (ExpressionData.VariableMapping[index].IsCellIdType)
                    {
                        commandData.isCellIdTypeCheck = true;
                        break;
                    }

                }
            }

            return commandData;
        }

Anite.Sequencer.IFCmdData ifCmd

elseCmd

elseifProg

updateScriptElements

GetListViewItem

UpdateScriptListViewIndentationLevels

    private void UpdateScriptListViewIndentationLevels()
        {
            int indentationLevel = 0;
            string indenterString = "    ";

            int index = 1;

            foreach (ListViewItem rowItem in scriptListView.Items)
            {
                int indentationCount = indentationLevel;
                string indentationString = "";
                string dataType = rowItem.SubItems[ListVwIndices.DATATYPE].Text;
                dataType = dataType.TrimStart();

                if ((dataType.StartsWith(ELEMENTANDDBTREE.IFCondition)) ||
                    (dataType.StartsWith(ELEMENTANDDBTREE.Loop)) ||
                    (dataType.StartsWith(ELEMENTANDDBTREE.BEGINInlineSubScript)))
                {
                    indentationLevel++;
                }
                else if ((dataType.StartsWith(ELEMENTANDDBTREE.ELSEIFCondition)) ||
                         (dataType.StartsWith(ELEMENTANDDBTREE.ELSECondition)))
                {
                    if (indentationCount > 0)
                    {
                        indentationCount--;
                    }
                }
                else if ((dataType.StartsWith(ELEMENTANDDBTREE.ENDIFCondition)) ||
                         (dataType.StartsWith(ELEMENTANDDBTREE.ENDLOOPCondition)) ||
                         (dataType.StartsWith(ELEMENTANDDBTREE.ENDInlineSubScript)))
                {
                    if (indentationLevel > 0)
                    {
                        indentationLevel--;
                        indentationCount--;
                    }
                }

                for (int i = 0; i < indentationCount; ++i)
                {
                    indentationString += indenterString;
                }

                rowItem.SubItems[ListVwIndices.DATATYPE].Text = indentationString + dataType;
                rowItem.SubItems[ListVwIndices.LINENUMBER].Text = index.ToString();
                index++;
            }
        }


   private void UpdateScriptListViewIndentationLevels()
        {
            int indentationLevel = 0;
            string indenterString = "    ";

            int index = 1;

            foreach (ListViewItem rowItem in scriptListView.Items)
            {
                int indentationCount = indentationLevel;
                string indentationString = "";
                string dataType = rowItem.SubItems[ListVwIndices.DATATYPE].Text;
                dataType = dataType.TrimStart();

                if ((dataType.StartsWith(ELEMENTANDDBTREE.IFCondition)) ||
                    (dataType.StartsWith(ELEMENTANDDBTREE.Loop)) ||
                    (dataType.StartsWith(ELEMENTANDDBTREE.BEGINInlineSubScript)))
                {
                    indentationLevel++;
                }
                else if ((dataType.StartsWith(ELEMENTANDDBTREE.ELSEIFCondition)) ||
                         (dataType.StartsWith(ELEMENTANDDBTREE.ELSECondition)))
                {
                    if (indentationCount > 0)
                    {
                        indentationCount--;
                    }
                }
                else if ((dataType.StartsWith(ELEMENTANDDBTREE.ENDIFCondition)) ||
                         (dataType.StartsWith(ELEMENTANDDBTREE.ENDLOOPCondition)) ||
                         (dataType.StartsWith(ELEMENTANDDBTREE.ENDInlineSubScript)))
                {
                    if (indentationLevel > 0)
                    {
                        indentationLevel--;
                        indentationCount--;
                    }
                }

                for (int i = 0; i < indentationCount; ++i)
                {
                    indentationString += indenterString;
                }

                rowItem.SubItems[ListVwIndices.DATATYPE].Text = indentationString + dataType;
                rowItem.SubItems[ListVwIndices.LINENUMBER].Text = index.ToString();
                index++;
            }
        }

ELEMENTANDDBTREE

Anite.Interactive.Utils

      public const string UserPrompt = "User Prompt";
        public const string ActivateCell = "Activate Cell";
        public const string UpdateCell = "Update Cell";
        public const string HandoverToCell = "Handover";
        public const string RedirectToCell = "Redirect";
        public const string CSFBToCell = "CSFB";
        public const string NetworkDetach = "Initiate Network Detach";
        public const string RRCConnectionRelease = "Release RRC Connection";
      
        public const string DeactivateCell = "Deactivate Cell";
        public const string ModifyCellPower = "Modify Cell Power";
      
        public const string PostProcessConfig = "Post Process Configuration";
       
        public const string UtranGeran = "UTRAN/GERAN";
        public const string Utran = "UTRAN";
        public const string Geran = "GERAN";
        public const string LoadScenario = "Load LTE Scenario";
        public const string Load2G3GScenario = "Load 2G3G Scenario";
       
        public const string ActivateUtranCell = "Activate Utran Cell";
        public const string ActivateGeranCell = "Activate Geran Cell";
        public const string DeactivateUtranCell = "Deactivate Utran Cell";
        public const string DeactivateGeranCell = "Deactivate Geran Cell";
        public const string ModifyUtranCellPower = "Modify Utran Cell Power";
        public const string ModifyGeranCellPower = "Modify Geran Cell Power";
        public const string WaitForGenericEvent = "Wait For LTE Event";
        public const string WaitFor2GEvent = "Wait For Geran Event";
        public const string WaitFor3GEvent = "Wait For Utran Event";
        public const string IFCondition = "IF";
        public const string ELSEIFCondition = "ELSEIF";
        public const string ELSECondition = "ELSE";
        public const string ENDIFCondition = "ENDIF";
        
        public const string ScriptDetails = "Script Details";
        public const string InactivityDataDetails = "Inactivity Data Timer";
        public const string Loop = "LOOP";
        public const string ENDLOOPCondition = "ENDLOOP";
        public const string BEGINInlineSubScript = "BEGIN INLINE SUB-SCRIPT";
        public const string ENDInlineSubScript = "END INLINE SUB-SCRIPT";
        public const string MessageToCount = "Count Message";

        public const string IEVariable = "IE Variable";
        public const string NumericVariable = "Numeric Variable";
        public const string StringVariable = "String Variable";

scriptListView

scriptList

ListVwIndices

ELEMENTANDDBTREE

 public const string SIMInformation = "SIM Information";

UpdateScriptListViewIndentationLevels

ELSECmdData

http://www.webservicex.net/RealTimeMarketData.asmx?WSDL

handle.updateEngine(ScriptEngine);
                handle.RunElement(data, cellID);

ExpressionSuccess

GetExpressionSuccess

executeFlag

ExpressionSuccess

  public bool GetExpressionSuccess()
        {
            return ExpressionSuccess;
        }

executeFlag = !handle.GetExpressionSuccess();

ProgramElementHandler

Anite.InteractiveScriptMode.ScriptElementHandlers

progHandlers

"Anite.Sequencer.BEGINInlineSubScriptCmdData"

