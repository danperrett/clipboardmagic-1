Arrecife Lanzarote - London Stansted

Date:	25 Aug 2014
Leaves:	Arrecife Lanzarote 07:25
Leaves:	London Stansted 11:30
Airline	Ryanair
Flight number	FR8286

London Stansted - Arrecife Lanzarote

Dates	15 Aug 2014
Leaves:	London Stansted 12:10
Arrives:	Arrecife Lanzarote 16:25
Airline	Ryanair
Flight number	FR8288
Lcf

Galeon Playa Costa Teguise, Lanzarote, Canaries 

C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\xsd.exe

$(ProjectDir)Schema\ScriptSchema.xsd  /c /n:Anite.Sequencer  /out:$(ProjectDir)Schema

L3PPipeMessageHandler




L3PPipeMessageHandler

L3PPipeMessageProcess

m_EarlyL3MessageThread

ProcessEarlyL3Message

finish Scheduling elements

I believe Colin would like to hand this over to me.

HandleUnexpectedEventV2

95.172.225.192

L3PPipeMessageHandler

HandleUnexpectedEventV2

\\myanite\telecoms\ODCShare\SAS\18 - Scripts\11 - Projects\03 - SAS UL message handling\SAS Enhancement - UL Message Handling_v[latest].docx

58405

m_Ignore_Event_type

                UtranGeranEventObtained2Param(EventQueueUtranGeranEventType.UnexpectedWaitForProcedure, -1);


UtranGeranEventObtained2Param

 if (found)
                    {
                        LogMessageToRTT("Ignore event according to script step", false);
                        reportToRTT = "IGNORE - " + message.Trim();
                        LogMessageToRTT(reportToRTT, false);
                        SASDebugLogger.InfoLog("UtranGeran: IGNORING Unexpected Event Message: " + message.Trim());
                    }
                    else
                    {
                        // When this function is called before the WaitFor processing don't terminate the script if there is no match
                        // When this function is called as default processing do terminate the script if there is no match
                        if (_TerminateTheScript)
                        {
                            SASDebugLogger.InfoLog("UtranGeran: Unexpected Event Message: " + message.Trim());
                            UtranGeranEventObtained2Param(EventQueueUtranGeranEventType.UnexpectedWaitForProcedure, -1);
                        }
                    }

Unexpected

indiscretion

 if (found)
                    {
                        LogMessageToRTT("Ignore event according to script step", false);
                        reportToRTT = "IGNORE - " + message.Trim();
                        LogMessageToRTT(reportToRTT, false);
                        SASDebugLogger.InfoLog("UtranGeran: IGNORING Unexpected Event Message: " + message.Trim());
                    }
                    else
                    {
                        // When this function is called before the WaitFor processing don't terminate the script if there is no match
                        // When this function is called as default processing do terminate the script if there is no match
                        if (_TerminateTheScript)
                        {
                            SASDebugLogger.InfoLog("UtranGeran: Unexpected Event Message: " + message.Trim());
                            UtranGeranEventObtained2Param(EventQueueUtranGeranEventType.UnexpectedWaitForProcedure, -1);
                        }
                    }


 if (found)
                    {
                        LogMessageToRTT("Ignore event according to script step", 

(m_Ignore_Event_type == Ignore_Event_type.IgnoreSelectedEvents)

 if (m_Ignore_Event_type == Ignore_Event_type.IgnoreSelectedEvents)

Ignore_Event_type.IgnoreNoEvents

70883

SAS Sequencer, Script not failing on unexpected messages from 2G3G.

L3PPipeMessageProcess

   public bool SendNotification(int _ElementIndex, string cellID, string message)
        {
            bool triggerOk = IsInitialised();
            if (triggerOk)
            {
                triggerOk = noProcedureWaiting();
            }

            try
            {
                if (triggerOk)
                {
                    string _message = "General Notification of event:" + cellID.Replace(' ', '-') + " " + message;
                    triggerOk = m_pipeManager.SendControl(_message, 10);
                    if (!triggerOk) m_lastErrorMessage = "failed to send trigger";
                }
            }
            catch
            {
                triggerOk = false;
                m_lastErrorMessage = "exception in Trigger";
            }

            return triggerOk;
        }

  catch
            {
                triggerOk = false;
                m_lastErrorMessage = "exception in Trigger";
            }

            return triggerOk;
        }


70883

<SAS-MKS-Check-In> : <Trunk> : <SAS2G3G> : IR <69968>

K, Kanagaraj <kanagaraj.k@anite.com>

70259

AutoResetEvent

70259

SharedView 

SEQ-REQ3

?	2G3G-REQ3

ConvertFrom_V14_7_to_V14_8.cs

/*****************************************************************************
 *
 * (C) Anite Telecoms Ltd, 2011. Commercially Confidential.
 *
 * $Author: Clwyd Jones (cjones) $
 * $Date: 2014/07/17 14:52:06BST $
 * $Revision: 1.1 $
 * $Source: SequencerGUI/Schema/Conversions/ConvertFrom_V14_7_to_V14_8.cs $
 *
 ****************************************************************************/
using System;
using System.Collections.Generic;
using System.Collections;

using Anite.Sequencer.Utils;

namespace Anite.Sequencer
{
    class ConvertFrom_V14_7_to_V14_8 : ConvertFromBase
    {
        public ConvertFrom_V14_7_to_V14_8(Dictionary<string, ConvertFromBase> _ConverterDict)
            : base("14.7", "14.8", new Anite.SASProtocolFieldValueMapperUtil.CoreSoftwareVersion() { Previous = "CS 23.0 {0160} SAS43", Current = "CS 23.0 {0160} SAS43" }, _ConverterDict)
        {
        }

        override protected void UpdateScriptInformationSpecifics(ScriptInformation _ScriptInformation)
        {
            // nothing to do
        }

        override protected ScriptElement[] UpdateScriptElementsSpecifics(List<ScriptElement> _ScriptElementList)
        {
            ScriptElement[] scriptElements = null;

            if (_ScriptElementList != null)
            {
                scriptElements = _ScriptElementList.ToArray();
            }

            return scriptElements;
        }
    }
}


ConvertFrom_V14_8_to_V15_0

  new ConvertFrom_V14_7_to_V14_8(m_Trunk_Converter_Info.Converters);
                m_Trunk_Converter_Info.Versions.Add("14.8");


68682

TMO project needs to check if they want more than delivered in SAS46 and, if not, what extra they need.

IR70259 

IR70259

doProcessGenNotificationSASUtranGeranElement

IEListProcessing_Data

ProcessingOK

GetNoElementsInIEList

81BFB20000081C0E7C1A210000

NumberOfElementsInList

'Locate and Check' option

70884

3805081C1C99801000082061030716306902660C9C4AA0850FFFFA3FFFFD0EE5DA3FFFFD0FFEFA3FFFFD0B65DA3FFFFD0EFFFA3FFFFD0FFFFA3FFFFD0FFFFA3FFFFD0AFFFA3FFFFD0AFFFA3FFFFD0FFFFA3FFFFD0AFFFA3FFFFD0DFFFA3FFFFD0FFFBA3FFFFD0FFF7A3FFFFD0FFFFA3FFFFD0FFFFA3FFFFD0FFFFA3FFFFBFEFFFFF47140110C870CA74A8300128F0600251E6B88E0B1E00000000752A0E0800202E0400704001014020038200080981001C1000404B0800E080020218400708001014C20038600080B81001C300040500800E18002026040070C001012C20038600080881001C300040410800E20002021840072C001010C20039600080821001CC00040430800E600020208400740001010C2003A000080821001D300040420800EC000202C840076400101602015A1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFFA1FFFF47FFFF0024000088A807E8000000007E8000000000016940000BA8CAAB541A955AA22920C112000600054384271CFBE6899EBB65CA138E7DF344CF5DB2F509C73EF9A267AED97884E39F7CD133D76CB73D0131C410A438F5E9A1A267AED96C00C80E80E00DC1529800003492DE91246CC1F020C2871234797326D0A762CE5D1B21033035758A6601404EF6513B887852F2831C1A53432B259EF9891E3000DDD9C633123C6001BA332C662478C0036040F0B0D000B8000810F01800A811F0F800

UE-EUTRA-Capability.nonCriticalExtension.nonCriticalExtension.nonCriticalExtension.rf-Parameters-v1020.supportedBandCombination-r10[0].BandCombinationParameters-r10[0].BandParameters-r10.bandEUTRA-r10






nonCriticalExtension



70884

http://stackoverflow.com/questions/5411538/how-to-redirect-from-an-html-page

public bool MeasureFromFlagIncluded = false;
        public string MeasureFromItemIncluded = "";
        public double actualTimeStampIncluded = 0.0;

    TestElement.MeasuredFromFlag = true;
                        }
                        TestElement.actualTimeStamp = details.timeDifference;
                        TestElement.MeasuredFromItem = details.MeasuredFromItem;

<html lang="en-US">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="refresh" content="1;url=http://example.com">
        <script type="text/javascript">
            window.location.href = "http://example.com"
        </script>
        <title>Page Redirection</title>
    </head>
    <body>
        <!-- Note: don't tell people to `click` the link, just tell them that it is a link. -->
        If you are not redirected automatically, follow the <a href='http://example.com'>link to example</a>
    </body>
</html>

MeasuredFromItem

<!DOCTYPE HTML>
<html lang="en-US">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="refresh" content="1;url=http://example.com">
        <script type="text/javascript">
            window.location.href = "http://example.com"
        </script>
        <title>Page Redirection</title>
    </head>
    <body>
        <!-- Note: don't tell people to `click` the link, just tell them that it is a link. -->
        If you are not redirected automatically, follow the <a href='http://example.com'>link to example</a>
    </body>
</html>

TestElement.actualTimeStampIncluded = details.timeDifference;
                        TestElement.MeasureFromItemIncluded = details.MeasuredFromItem;

   if (element.MeasureFromFlagIncluded)
                                {
                                    if (str == element.MeasureFromItemIncluded)
                                    {
                                        tc2 = testCaseElement[location].matchedTimes[entry.Key];
                                    }
                                }

 string measured = element.MeasuredFromItem;
                        if (matchedTimeMasterList.ContainsKey(measured))
                        {

if (element.MeasureFromFlagIncluded)
                            {

 int location = matchedTimeMasterList[measured];

 foreach (KeyValuePair<string, MatchedTimesClass> entry in testCaseElement[location].matchedTimes)
                            {

 string str = entry.Key.Split('.')[0];

if (element.MeasureFromFlagIncluded)
                            {

if (element.MeasureFromFlagIncluded)
                                    {

                                    }

                                int sequenceNum = tc.sequenceNumber;

double measuredTimeIs = 0.0;
                                for (n = 0; n < testCaseElement[location].elements.Count; n++)
                                {
                                    if (testCaseElement[location].elements[n].sequenceNumber == tc.sequenceNumber)
                                    {
                                        measuredTimeIs = testCaseElement[location].elements[n].actualTimeStamp;
                                        break;
                                    }
                                }

                                double thisTimeIs = testCaseElement[matchLocation + i].matchedTimes[element.ItemID].time;
                                double diff = thisTimeIs - measuredTimeIs;
                                testCaseElement[location].elements[lastTimeLocation].timedifference = diff;

int _location

http://www.danperrett.com:8000/GetPictureHtml?id=8019&proj_id=466

http://www.danperrett.com:8000/getProjectsAndIds?pro_id=466

double diff2

(element.actualTimeStamp * 1000)

reportMatchToResults(element.ItemID, "Time Error of " + diff + " ms from " + measured + " to " + element.ItemID, testCaseElement[matchLocation + i].matchedTimes[element.ItemID].sequenceNumber);
                                        timeError.Add(testCaseElement[location].elements[lastTimeLocation].sequenceNumber, (int)diff);
                                        ret = true;

1836

timedifference

details.timeDifference

timedifference

details.timeDifference

if (variable != null)
            {

IEextractResults

000183ddeeff000183aabbcc86dd600000000336113ffd29cc437fb90002020c29fffe66b4c7300000000000000324c1c5456439b83d13c413c40336bad64d455353414745207369703a3132303634383939303038405b333030303a3a333a323463313a633534353a363433393a623833645d3a35303630205349502f322e300d0a4d61782d466f7277617264733a2036380d0a526571756573742d446973706f736974696f6e3a206e6f2d666f726b0d0a436f6e74656e742d547970653a206170706c69636174696f6e2f766e642e336770702e736d730d0a4163636570742d436f6e746163743a202a3b2b672e336770702e736d7369700d0a5669613a205349502f322e302f554450205b666432393a636334333a376662393a323a3230633a323966663a666536363a623463375d3a353036303b206272616e63683d7a39684734624b6133656564353531653461660d0a5669613a205349502f322e302f5544502073637363662e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3861346461653230356533620d0a5669613a205349502f322e302f554450206970736d67772e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3263623161643831396461620d0a46726f6d3a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3e3b207461673d41544c3234345f6436333434333731663366360d0a546f3a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a43616c6c2d49443a206464303936333962663436660d0a435365713a2031204d4553534147450d0a502d43616c6c65642d50617274792d49443a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a502d41737365727465642d4964656e746974793a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3b757365723d70686f6e653e0d0a436f6e74656e742d4c656e6774683a2036370d0a0d0a010003912143003b0009a132413263f200014170517142340029c8329bfd065ddf723619143c87d36e50d84d0605cfe1b41b14769341c17338ed0e8542210000000000

FormsLibrary

string rp_data = smsSend.GetRPData();

smsform

using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

 class Server
  {
    private TcpListener tcpListener;
    private Thread listenThread;

    public Server()
    {
      this.tcpListener = new TcpListener(IPAddress.Any, 3000);
      this.listenThread = new Thread(new ThreadStart(ListenForClients));
      this.listenThread.Start();
    }
  }

using System.Threading;

private void ListenForClients()
{
  this.tcpListener.Start();

  while (true)
  {
    //blocks until a client has connected to the server
    TcpClient client = this.tcpListener.AcceptTcpClient();

    //create a thread to handle communication 
    //with connected client
    Thread clientThread = new Thread(new ParameterizedThreadStart(HandleClientComm));
    clientThread.Start(client);
  }
}

private void HandleClientComm(object client)
{
  TcpClient tcpClient = (TcpClient)client;
  NetworkStream clientStream = tcpClient.GetStream();

  byte[] message = new byte[4096];
  int bytesRead;

  while (true)
  {
    bytesRead = 0;

    try
    {
      //blocks until a client sends a message
      bytesRead = clientStream.Read(message, 0, 4096);
    }
    catch
    {
      //a socket error has occured
      break;
    }

    if (bytesRead == 0)
    {
      //the client has disconnected from the server
      break;
    }

    //message has successfully been received
    ASCIIEncoding encoder = new ASCIIEncoding();
    System.Diagnostics.Debug.WriteLine(encoder.GetString(message, 0, bytesRead));
  }

  tcpClient.Close();
}

TcpClient client = new TcpClient();

IPEndPoint serverEndPoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 3000);

client.Connect(serverEndPoint);

NetworkStream clientStream = client.GetStream();

Anite.Interactive.Utils

clientStream.Write(buffer, 0 , buffer.Length);
clientStream.Flush();

000183ddeeff000183aabbcc86dd600000000336113ffd29cc437fb90002020c29fffe66b4c7300000000000000324c1c5456439b83d13c413c40336bad64d455353414745207369703a3132303634383939303038405b333030303a3a333a323463313a633534353a363433393a623833645d3a35303630205349502f322e300d0a4d61782d466f7277617264733a2036380d0a526571756573742d446973706f736974696f6e3a206e6f2d666f726b0d0a436f6e74656e742d547970653a206170706c69636174696f6e2f766e642e336770702e736d730d0a4163636570742d436f6e746163743a202a3b2b672e336770702e736d7369700d0a5669613a205349502f322e302f554450205b666432393a636334333a376662393a323a3230633a323966663a666536363a623463375d3a353036303b206272616e63683d7a39684734624b6133656564353531653461660d0a5669613a205349502f322e302f5544502073637363662e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3861346461653230356533620d0a5669613a205349502f322e302f554450206970736d67772e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3263623161643831396461620d0a46726f6d3a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3e3b207461673d41544c3234345f6436333434333731663366360d0a546f3a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a43616c6c2d49443a206464303936333962663436660d0a435365713a2031204d4553534147450d0a502d43616c6c65642d50617274792d49443a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a502d41737365727465642d4964656e746974793a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3b757365723d70686f6e653e0d0a436f6e74656e742d4c656e6774683a2036370d0a0d0a010003912143003b0009a132413263f200014170517142340029c8329bfd065ddf723619143c87d36e50d84d0605cfe1b41b14769341c17338ed0e8542210000000000


4d455353414745207369703a3132303634383939303038405b333030303a3a333a323463313a633534353a363433393a623833645d3a35303630205349502f322e300d0a4d61782d466f7277617264733a2036380d0a526571756573742d446973706f736974696f6e3a206e6f2d666f726b0d0a436f6e74656e742d547970653a206170706c69636174696f6e2f766e642e336770702e736d730d0a4163636570742d436f6e746163743a202a3b2b672e336770702e736d7369700d0a5669613a205349502f322e302f554450205b666432393a636334333a376662393a323a3230633a323966663a666536363a623463375d3a353036303b206272616e63683d7a39684734624b6133656564353531653461660d0a5669613a205349502f322e302f5544502073637363662e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3861346461653230356533620d0a5669613a205349502f322e302f554450206970736d67772e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3263623161643831396461620d0a46726f6d3a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3e3b207461673d41544c3234345f6436333434333731663366360d0a546f3a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a43616c6c2d49443a206464303936333962663436660d0a435365713a2031204d4553534147450d0a502d43616c6c65642d50617274792d49443a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a502d41737365727465642d4964656e746974793a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3b757365723d70686f6e653e0d0a436f6e74656e742d4c656e6774683a2036370d0a0d0a010003912143003b0009a132413263f200014170517142340029c8329bfd065ddf723619143c87d36e50d84d0605cfe1b41b14769341c17338ed0e8542210000000000

rp_data

43 6F 6E 74 65 6E 74 2D 4C 65 6E 67 74 68 3A 20

436F6E74656E742D4C656E6774683A20

6F6E74656E742D4C656E6774683A2050570d0a0d0a

 smsSend.GetData();

  SMSInteractiveDriverParameters param

 Anite.Interfaces

"4d455353414745207369703a3132303634383939303038405b333030303a3a333a323463313a633534353a363433393a623833645d3a35303630205349502f322e300d0a4d61782d466f7277617264733a2036380d0a526571756573742d446973706f736974696f6e3a206e6f2d666f726b0d0a436f6e74656e742d547970653a206170706c69636174696f6e2f766e642e336770702e736d730d0a4163636570742d436f6e746163743a202a3b2b672e336770702e736d7369700d0a5669613a205349502f322e302f554450205b666432393a636334333a376662393a323a3230633a323966663a666536363a623463375d3a353036303b206272616e63683d7a39684734624b6133656564353531653461660d0a5669613a205349502f322e302f5544502073637363662e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3861346461653230356533620d0a5669613a205349502f322e302f554450206970736d67772e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3263623161643831396461620d0a46726f6d3a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3e3b207461673d41544c3234345f6436333434333731663366360d0a546f3a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a43616c6c2d49443a206464303936333962663436660d0a435365713a2031204d4553534147450d0a502d43616c6c65642d50617274792d49443a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a502d41737365727465642d4964656e746974793a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3b757365723d70686f6e653e0d0a436F6E74656E742D4C656E6774683A2033350d0a0d0a010007801052123254F60018000C8010525255211300014180211104810004F4F29C0E"

"4d455353414745207369703a3132303634383939303038405b333030303a3a333a323463313a633534353a363433393a623833645d3a35303630205349502f322e300d0a4d61782d466f7277617264733a2036380d0a526571756573742d446973706f736974696f6e3a206e6f2d666f726b0d0a436f6e74656e742d547970653a206170706c69636174696f6e2f766e642e336770702e736d730d0a4163636570742d436f6e746163743a202a3b2b672e336770702e736d7369700d0a5669613a205349502f322e302f554450205b666432393a636334333a376662393a323a3230633a323966663a666536363a623463375d3a353036303b206272616e63683d7a39684734624b6133656564353531653461660d0a5669613a205349502f322e302f5544502073637363662e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3861346461653230356533620d0a5669613a205349502f322e302f554450206970736d67772e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3263623161643831396461620d0a46726f6d3a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3e3b207461673d41544c3234345f6436333434333731663366360d0a546f3a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a43616c6c2d49443a206464303936333962663436660d0a435365713a2031204d4553534147450d0a502d43616c6c65642d50617274792d49443a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a502d41737365727465642d4964656e746974793a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3b757365723d70686f6e653e0d0a436F6E74656E742D4C656E6774683A2033350d0a0d0a010007801052123254F60018000B8010525255211300014180211104810004F4F29C0E"

4d455353414745207369703a3132303634383939303038405b333030303a3a333a323463313a633534353a363433393a623833645d3a35303630205349502f322e300d0a4d61782d466f7277617264733a2036380d0a526571756573742d446973706f736974696f6e3a206e6f2d666f726b0d0a436f6e74656e742d547970653a206170706c69636174696f6e2f766e642e336770702e736d730d0a4163636570742d436f6e746163743a202a3b2b672e336770702e736d7369700d0a5669613a205349502f322e302f554450205b666432393a636334333a376662393a323a3230633a323966663a666536363a623463375d3a353036303b206272616e63683d7a39684734624b6133656564353531653461660d0a5669613a205349502f322e302f5544502073637363662e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3861346461653230356533620d0a5669613a205349502f322e302f554450206970736d67772e616e79696d732e746573742e336770702e636f6d3b206272616e63683d7a39684734624b3263623161643831396461620d0a46726f6d3a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3e3b207461673d41544c3234345f6436333434333731663366360d0a546f3a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a43616c6c2d49443a206464303936333962663436660d0a435365713a2031204d4553534147450d0a502d43616c6c65642d50617274792d49443a203c7369703a313230363438393930303840696d732e6d6e633331302e6d63633331302e336770706e6574776f726b2e6f72673e0d0a502d41737365727465642d4964656e746974793a203c7369703a2b313834373237333338303040746573742e336770702e636f6d3b757365723d70686f6e653e0d0a436F6E74656E742D4C656E6774683A2033350d0a0d0a010007801052123254F60017000B8010525255211300014180211104810004F4F29C0E

(m_pdu->CPdata.rpdata.rpusrdat.tpdeliver.oa.addrlen/2)

return (m_pdu->CPdata.rpdata.rpusrdat.tpdeliver.oa.addrlen/2) + 1;

690123010007801052123254F60017000B801052525521F300014180215172720004F4F29C0E

addrlen

getMTUsrDataLength

 return 2 +  10 + getMTTPAddrsLength() + getMTUsrDataLength();

getMTRPUsrDataLength

TPServiceCenterTimeStampLength()

TPPIDLENGTH

TPDCSLENGTH

TPUSERDATAHEADERLENGTH

TPEXTRAS

TPServiceCenterTimeStampLength

m_pdu->CPdata.rpdata.rpusrdat.tpdeliver.oa.addrlen

TPADDRESSHEADLENGTH

TPUSERDATALENGTHINDLENGTH

tpdeliver.ud

_0812172224_001

tpdeliver.oa.addrlen

690128010007801052123254F6001C000C8010525255212300014180310153100004F4F29C0E

690123010007801052123254F60017000B801052525521F300014180310134200004F4F29C0E

SetMTServiceCenterTimeStamp

TimestampLength

RPDESADDRLEN

RPADDREXTLEN

MESSTYPELEN

RPMESSREFLEN

690123010007801052123254F60017000B801052525521F300014180311165430004F4F29C0E

47941

69762

                Malformed packet found in wire shark

69762

http://en.wikipedia.org/wiki/Real_Time_Streaming_Protocol

CSeq

HTTP Live Streaming

mediastreamsegmenter 

http://en.wikipedia.org/wiki/HTTP_Live_Streaming

https://developer.apple.com/library/ios/documentation/networkinginternet/conceptual/streamingmediaguide/UsingHTTPLiveStreaming/UsingHTTPLiveStreaming.html#//apple_ref/doc/uid/TP40008332-CH102-SW1

http://swimminginthought.com/streaming-mp4-video-webserver-solved/

h264

68307

Ancells Business Park
Harvest Crescent
Fleet
Hampshire
GU51 2UZ
United Kingdom

charaton@talktalk.net

Ancells Business Park
Harvest Crescent
Fleet
Hampshire
GU51 2UZ
United Kingdom

http://h264.code-shop.com/trac/wiki/Mod-H264-Streaming-Apache-Version2

DTEpc_SASLTE.DLL_

Detach_Reques

RrcEventHandler

ProcedureStarted

CRrcProcedureEventHandlerBase

CRrcProcedureEventHandlerBase.ProcedureStarted

RrcEventHandler::ProcedureStarted

GD68FL 

d_per89@axcetly.net

P:\Today\DanP\Run09

GenericInterfaces\Schema

C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\xsd.exe

$(ProjectDir)Schema\ScriptSchema.xsd  /c /n:Anite.Sequencer  /out:$(ProjectDir)Schema

C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\xsd.exe


$(ProjectDir)Schema\ScriptSchema.xsd  /c /n:Anite.Sequencer  /out:$(ProjectDir)Schema


GenericInterfaces\Schema


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Anite.Interfaces;
using Anite.Interactive.Utils;
using Anite.SASCommonLibrary;

namespace Anite.Interactive.Utils
{
    class ConvertECellFrom_V7_0_to_V8_0 : ConvertFromBase
    {
        public ConvertECellFrom_V7_0_to_V8_0()
            : base("7.0", "8.0")
        {
        }
        
        override protected ECell UpdateCellInformationSpecifics(ECell cellInstance)
        {
            // nothing that needs converting
            return cellInstance;
        }
    }
}

ConvertECellFrom_V1.0_to_V2.0.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Anite.Interfaces;
using Anite.Interactive.Utils;
using Anite.SASCommonLibrary;

namespace Anite.Interactive.Utils
{
    class ConvertECellFrom_V7_0_to_V8_0 : ConvertFromBase
    {
        public ConvertECellFrom_V7_0_to_V8_0()
            : base("7.0", "8.0")
        {
        }
        
        override protected ECell UpdateCellInformationSpecifics(ECell cellInstance)
        {
            // nothing that needs converting
            return cellInstance;
        }
    }
}

namespace Anite.Interfaces {


 Anite.Interfaces 

new ConvertFrom_V14_7_to_V14_8(m_Trunk_Converter_Info.Converters);
                m_Trunk_Converter_Info.Versions.Add("14.8");

Anite.Script.Utils

ConvertFrom_V14_8_to_V15_0

(m_Trunk_Converter_Info.Converters);
                m_Trunk_Converter_Info.Versions.Add("14.8");

m_EpsBearerProcessed

BEARER_CONTEXT_REQUEST

DirectTransferDL

ProcedureEnded

