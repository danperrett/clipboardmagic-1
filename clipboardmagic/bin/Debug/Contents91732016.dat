using System.Text;
using System.Net;
using System.Net.Sockets;
using System.Threading;


 TcpListener server = null;  

TcpClient client

 IPAddress localAddr = IPAddress.Any;

 // TcpListener server = new TcpListener(port);
            server = new TcpListener(localAddr, port);

 // Buffer for reading data
            Byte[] bytes = new Byte[256];
            String data = null;

 Console.Write("Waiting for a connection... ");

data = null;

                // Get a stream object for reading and writing
                NetworkStream stream = client.GetStream();

                // Get a stream object for reading and writing
                stream = client.GetStream();

 NetworkStream stream 

 // Loop to receive all the data sent by the client.
                while ((i = stream.Read(bytes, 0, bytes.Length)) != 0)
                {

int i;

 TcpListener server = null;  
            // Set the TcpListener on port 13000.
            Int32 port = 9150;
            IPAddress localAddr = IPAddress.Any;

            // TcpListener server = new TcpListener(port);
            server = new TcpListener(localAddr, port);

            // Start listening for client requests.
            server.Start();

            // Buffer for reading data
            Byte[] bytes = new Byte[256];
            String data = null;

            // Enter the listening loop.
            while (true)
            {
                Console.Write("Waiting for a connection... ");

                // Perform a blocking call to accept requests.
                // You could also user server.AcceptSocket() here.
                TcpClient client = server.AcceptTcpClient();
                Console.WriteLine("Connected!");

                data = null;

                // Get a stream object for reading and writing
                NetworkStream stream = client.GetStream();

                int i;

                // Loop to receive all the data sent by the client.
                while ((i = stream.Read(bytes, 0, bytes.Length)) != 0)
                {
                    // Translate data bytes to a ASCII string.
                    data = System.Text.Encoding.ASCII.GetString(bytes, 0, i);
                    Console.WriteLine("Received: {0}", data);

                    // Process the data sent by the client.
                    data = data.ToUpper();

                    byte[] msg = System.Text.Encoding.ASCII.GetBytes(data);

                    // Send back a response.
                    stream.Write(msg, 0, msg.Length);
                    Console.WriteLine("Sent: {0}", data);
                }

                // Shutdown and end connection
                client.Close();
            }

thread = new System.Threading.Thread(new System.Threading.ThreadStart(ReceiveThread));

recvThread

 TcpClient client = server.AcceptTcpClient();    

client = server.AcceptTcpClient();    

// Translate data bytes to a ASCII string.
          data = System.Text.Encoding.ASCII.GetString(bytes, 0, i);
          Console.WriteLine("Received: {0}", data);

if (stream != null)
                {

 byte[] msg = System.Text.Encoding.ASCII.GetBytes(data);

Console.Write(":");

C:\Users\502525009\Documents\Visual Studio 2010\Projects\TechnicianTerminal\TechnicianTerminal\bin\Debug

IPAddress.Parse(((
    IPEndPoint)client.Client.RemoteEndPoint).Address.ToString()));

C:\Users\502525009\Documents\Visual Studio 2010\Projects\TechnicianTerminal\TechnicianTerminal\bin\Debug

workerThread

    recvThread = new System.Threading.Thread(new System.Threading.ThreadStart(ReceiveThread));

 client = server.AcceptTcpClient();
            Console.WriteLine("Connected to {0}", IPAddress.Parse(((IPEndPoint)client.Client.RemoteEndPoint).Address.ToString()));

recieverunning

client = new TcpClient(DestIPAddressTextBox.Text, 3400);

client = new TcpClient(address, port);

203043529395 

20-25-36 93607690 

