GetScriptVariableInDriverFormat

IEProgramVariable driverProgramVar = new IEProgramVariable();

            if (InformationElement != null)
            {
                driverProgramVar.Direction = (DirectionType)Enum.Parse(typeof(DirectionType), InformationElement.direction);
                driverProgramVar.IEName = InformationElement.Name;
                driverProgramVar.ProtocolMessage = (ProtocolMessageType)Enum.Parse(typeof(ProtocolMessageType), InformationElement.ProtocolMessageType);
            }

            driverProgramVar.Name = Name;
            driverProgramVar.VariableType = (ProgramVariableBase.VariableTypeEnum)VarType;

 IEProgramVariable driverProgramVar = new IEProgramVariable();

            if (InformationElement != null)
            {
                driverProgramVar.Direction = (DirectionType)Enum.Parse(typeof(DirectionType), InformationElement.direction);
                driverProgramVar.IEName = InformationElement.Name;
                driverProgramVar.ProtocolMessage = (ProtocolMessageType)Enum.Parse(typeof(ProtocolMessageType), InformationElement.ProtocolMessageType);
            }

            driverProgramVar.Name = Name;
            driverProgramVar.VariableType = (ProgramVariableBase.VariableTypeEnum)VarType;

((IEVariable)this).InformationElement

StringProgramVariable driverProgramVar = new StringProgramVariable();

            driverProgramVar.Name = Name;
            driverProgramVar.ImplicitConversionType = (StringProgramVariable.ImplicitConversionTypeEnum)this.ImplicitConversionType;

(StringVariable)

progVar = driverProgramVar;

ConvertGUIVariblesToDriverVariables

 Anite.Sequencer.InterfacesCopy.ProgramVariableBase[]

Anite.Sequencer.InterfacesCopy.ProgramVariableBase[] progVars

progVars

ProgramVariableBase

// Add variables to variable dictionary
            foreach (ProgramVariableBase programVariable in _RunCommand.scriptVariables)
            {
                m_SequencerVariables.AddVariable(programVariable);
            }

private SequencerVariables m_SequencerVariables = null;

m_SequencerVariables

messageCounter.LTECount[str]

messageCounter.variableToCountTo[str]

varName

 if (m_SequencerVariables != null)
                                {
                                    EvaluatorVariable variable = null;
                                    m_SequencerVariables.Find(varName, out variable);
                                    if (variable.IsNumeric)
                                    {
                                        variable.AssignValue(messageCounter.LTECount[str].ToString());
                                    }
                                }

assignCountToVariable

messageCounter.LTECount[str]

assignCountToVariable(varName,

m_SequencerVariables

resetMessageCountList();

C:\Development\SASSandboxes\LTE-Interactive-SAS47.0-D\Code\SASLTEInteractiveScriptMode\ScriptElementHandlers\Class1.cs

/*****************************************************************************
 *
 * (C) Anite Telecoms Ltd, 2010. Commercially Confidential.
 *
 * $Author: Dan Perrett (dperrett) $
 * $Date: 2014/01/13 10:35:25GMT $
 * $Revision: 1.2 $
 * $Source: Code/SASLTEInteractiveScriptMode/ScriptElementHandlers/CSFBElementHandler.cs $
 *
 ****************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Anite.Interactive.Utils;
using Anite.Sequencer;
using Anite.Sequencer.Interfaces;

IScriptElementHandler

 ScriptModeEngine ScriptEngine = null;

        SCRIPT_MODE_STATES state = SCRIPT_MODE_STATES.GET_MESAGE;


     public void updateEngine(ScriptModeEngine engine)
        {
            ScriptEngine = engine;
        }

        public void subscribe(object func)
        {
            handoverFunc = (HandoverCellHandler)func;
        }

        public SCRIPT_MODE_EVENT_TYPES RunElement(ElementData data, string cellID)
        {
            InteractiveMTCSFB CSFBData = data as InteractiveMTCSFB;

            timerValue = 6 * 60 * 1000;

            if (handoverFunc != null)
            {
                handoverFunc(CSFBData.CellTo);
                ScriptEngine.setupTimeOut(SCRIPT_MODE_EVENT_TYPES.HANDOVER_COMPLETE, timerValue);
                return SCRIPT_MODE_EVENT_TYPES.HANDOVER_COMPLETE;
            }

            return SCRIPT_MODE_EVENT_TYPES.NONE;
        }

        public void CopyDataTo(ElementData data)
        {
        }

        public SCRIPT_MODE_STATES changeStateTo()
        {
            return state;
        }

        public string GetName()
        {
            return "CSFB ";
        }

        public int GetTimeoutValue()
        {
            return timerValue;
        }

        public TESTVERDICTS GetPassFail()
        {
            return TESTVERDICTS.PASS_VERDICT;
        }

        public TESTSTATUS GetTestStatus()
        {
            return TESTSTATUS.CODE_SUCCESS;
        }

        public string GetErrors()
        {
            return "";
        }

ElementHandler

Anite.InteractiveScriptMode.ScriptElementHandlers

int timerValue = 0;

timerValue

override 

ScriptEngine

override 

ScriptEngine

override 

ScriptEngine

override 

ProgrammingData progData = data as ProgrammingData;

progData.ProgrammingCmdData

Anite.Sequencer

  public override Programming_Cmd_Data GetDataInDriverFormat()
        {
            Programming_Cmd_Data commandData = new Programming_Cmd_Data();
            commandData.programmingData = this.ExpressionData.ConditionExpression;
            commandData.commandType = Command_type_enum.IF;
            commandData.isIEConditionCheck = false;
            commandData.isMsgTypCheck = false;

            if (ExpressionData.VariableMapping != null)
            {
                int numberOfMappings = ExpressionData.VariableMapping.Length;

                for (int index = 0; index < numberOfMappings; index++)
                {
                    if (ExpressionData.VariableMapping[index].IsCondition)
                    {
                        commandData.isIEConditionCheck = true;
                        break;
                    }

                    if (ExpressionData.VariableMapping[index].IsMessageType)
                    {
                        commandData.isMsgTypCheck = true;
                        break;
                    }

                    if (ExpressionData.VariableMapping[index].IsCellIdType)
                    {
                        commandData.isCellIdTypeCheck = true;
                        break;
                    }
                }
            }

            return commandData;
        }

Anite.Sequencer.IFCmdData

ifCmd

Programming_Cmd_Data

C:\Development\SASSandboxes\LTE-Interactive-SAS47.0-D\Code\SequencerScriptDefinitions

C:\Development\SASSandboxes\LTE-Interactive-SAS47.0-D\Code\LTE-InteractiveScript-Editor\Code\SequencerGUI\Schema

L3PPipeMessageHandler: 

