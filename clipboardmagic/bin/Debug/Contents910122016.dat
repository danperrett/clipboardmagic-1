C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\cctvAdapter.exe

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

initialise

..\..\..\lib

$(SolutionDir)..\include

CutlasIniFile

CutlasHelperS.lib

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\TycoAgent_v2\TycoAgent_DVTel.dll

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\cctvAdapter.exe

Tyco Camera failed to find camera ID for camera 'CCTV01'

initialise

ITycoCCTVInterfacePtr pICalc(__uuidof(ManagedClass));

pICalc

#import ".\ManagedDll.tlb" 

using namespace ManagedDll;

CutlasHelperS.lib

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\cctvAdapterd.exe

cctvAdapter

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

#import ".\ManagedDll.tlb"

TycoAgent_DVTel

C:\Secure\SourceNew\Core\Adapter_VS10\JTAlgorithmUnitTest\example\example

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.dll

3515

[DispId(1)]

using System.Runtime.InteropServices;

[DispId(1)]

guidgen.exe

[Guid("2D618965-AE4E-44AB-87A8-7FC4B9256AD6")]

InterfaceType(ComInterfaceType.InterfaceIsIDispatch)]

[DispId(2)]

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.pdb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.tlb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.dll

BSTR _result = 0;

C:\Secure\SourceNew\Core\Adapter_VS10\JTAlgorithmUnitTest\example\example\ManagedDll.dll

C:\Secure\SourceNew\Core\Adapter_VS10\JTAlgorithmUnitTest\example\example\ManagedDll.pdb

C:\Secure\SourceNew\Core\Adapter_VS10\JTAlgorithmUnitTest\example\example\ManagedDll.tlb

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\manageddll.tlh

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\manageddll.tli

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\cctvAdapterd.exe

TycoAgent_DVTel

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.pdb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.tlb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.dll

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

[DispId(11)]
        int GetNumberOfPresets(int camerNum);

[DispId(10)]
        int GetCameraNumberFromName(string name);

[DispId(12)]
        bool Logoff();

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.dll

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.pdb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.tlb

video_controller

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.dll

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.pdb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.tlb

  string errors =  pICalc->GetErrors();

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.dll

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.pdb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll\ManagedDll\bin\x86\Debug\ManagedDll.tlb

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

TycoAgent_DVTel

'/RTC1' and '/clr

TycoAgent_DVTel

/Zi /clr:oldSyntax /nologo /W3 /WX- /Od /Oy- /D "WIN32" /D "_DEBUG" /D "_UNICODE" /D "UNICODE" /EHa /GS /fp:precise /Zc:wchar_t /Zc:forScope /Yu"StdAfx.h" /Fp"Debug\example.pch" /Fa"Debug\" /Fo"Debug\" /Fd"Debug\vc100.pdb" /FU"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Core.dll" /FU"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Data.dll" /FU"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.dll" /FU"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Xml.dll" /analyze- /errorReport:queue 

/Od /I "..\..\include" /I "..\..\ThirdParty" /I "C:\Program Files\Envitia\MapLink Pro\7.1\bin64\..\include" /I "C:\secure\source\cutlas\core\include" /D "WIN32" /D "_DEBUG" /D "_WINDOWS" /D "_CRT_SECURE_NO_WARNINGS" /D "_VC80_UPGRADE=0x0710" /D "_SECURE_SCL=0" /D "_HAS_ITERATOR_DEBUGGING=0" /D "_CRT_SECURE_NO_DEPRECATE" /D "_CRT_NONSTDC_NO_DEPRECATE" /D "_SCL_SECURE_NO_DEPRECATE" /D "_AFXDLL" /D "_MBCS" /FD /EHa /MDd /Zc:wchar_t- /Fp".\..\..\Debug\cctvAdapter\cctvAdapter.pch" /Fo".\..\..\Debug\cctvAdapter/" /Fd".\..\..\Debug\cctvAdapter/" /W3 /nologo /c /Zi /clr:oldSyntax /errorReport:prompt

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\cctvAdapterd.exe

TycoAgent_DVTel

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\cctvAdapterd.exe

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\TycoAgent_v2\TycoAgent.dll

C:\Secure\Source\cutlas\Core\Debug\CCTVAdapter\cctvAdapterd.exe

m_northBoundLatitude

northBound

   private bool AreaOfInterest(PointCoordinates from, PointCoordinates to)
        {
            log.Info(string.Format("To({0}, {1}) From({2}, {3})", to.latitude, to.longitude, from.latitude, to.longitude));

            if ((from.latitude <= m_northBoundLatitude) && (from.latitude >= m_southBoundLatitude) &&
                (from.longitude <= m_eastBoundLongitude) && (from.longitude >= m_westBoundLongitude))
                return true;

            log.Info("One end is out side the boundry area");

            if ((to.latitude <= m_northBoundLatitude) && (to.latitude >= m_southBoundLatitude) &&
                (to.longitude <= m_eastBoundLongitude) && (to.longitude >= m_westBoundLongitude))
                return true;

            log.Info("Both ends are outside of the boundry area");

            return false;
        }

   // start with default UK values
        // Default UK TopLeft(60.85,-9.23)
        // Default UK BottomRight (49.84, 2.69)
        private double m_northBoundLatitude = 60.85;
        private double m_westBoundLongitude = -9.23;
        private double m_southBoundLatitude = 49.84;
        private double m_eastBoundLongitude = 2.69;

temp = ConfigurationManager.AppSettings["NorthBoundLatitude"];
            if (temp == null)
            {
                log.Error("NorthBoundLatitude does not exist in Web.config");
            }
            else if (!double.TryParse(temp.ToString(), out m_northBoundLatitude))
            {
                log.Error(string.Format("Failed to parse NorthBoundLatitude({0}) in Web.config", ConfigurationManager.AppSettings["NorthBoundLatitude"].ToString()));
            }

            temp = ConfigurationManager.AppSettings["SouthBoundLatitude"];
            if (temp == null)
            {
                log.Error("SouthBoundLatitude does not exist in Web.config");
            }
            else if (!double.TryParse(temp.ToString(), out m_southBoundLatitude))
            {
                log.Error(string.Format("Failed to parse SouthBoundLatitude({0}) in Web.config", ConfigurationManager.AppSettings["SouthBoundLatitude"].ToString()));
            }

            temp = ConfigurationManager.AppSettings["EastBoundLongitude"];
            if (temp == null)
            {
                log.Error("EastBoundLongitude does not exist in Web.config");
            }
            else if (!double.TryParse(temp.ToString(), out m_eastBoundLongitude))
            {
                log.Error(string.Format("Failed to parse EastBoundLongitude({0}) in Web.config", ConfigurationManager.AppSettings["EastBoundLongitude"].ToString()));
            }

            temp = ConfigurationManager.AppSettings["WestBoundLongitude"];
            if (temp == null)
            {
                log.Error("WestBoundLongitude does not exist in Web.config");
            }
            else if (!double.TryParse(temp.ToString(), out m_westBoundLongitude))
            {
                log.Error(string.Format("Failed to parse WestBoundLongitude({0}) in Web.config", ConfigurationManager.AppSettings["WestBoundLongitude"].ToString()));
            }

 private bool AreaOfInterest(PointCoordinates from, PointCoordinates to)
        {
            log.Info(string.Format("To({0}, {1}) From({2}, {3})", to.latitude, to.longitude, from.latitude, to.longitude));

            if ((from.latitude <= m_northBoundLatitude) && (from.latitude >= m_southBoundLatitude) &&
                (from.longitude <= m_eastBoundLongitude) && (from.longitude >= m_westBoundLongitude))
                return true;

            log.Info("One end is out side the boundry area");

            if ((to.latitude <= m_northBoundLatitude) && (to.latitude >= m_southBoundLatitude) &&
                (to.longitude <= m_eastBoundLongitude) && (to.longitude >= m_westBoundLongitude))
                return true;

            log.Info("Both ends are outside of the boundry area");

            return false;
        }


  Point pt = (Point)srec.groupOfLocations;

 Point pt = (Point)srec.groupOfLocations;

  PointCoordinates pc = pt.locationForDisplay;

SubscriberService/GZipEncoder/GZipMessageEncoderFactory.cs

if (gtype == typeof(NonOrderedLocationGroupByList))
                {
                    NonOrderedLocationGroupByList gloc = (NonOrderedLocationGroupByList)srec.groupOfLocations;
                    foreach (Location loc in gloc.locationContainedInGroup)
                    {
                        if (loc.GetType() == typeof(Point))
                        {
                            Point pt = (Point)gloc.locationContainedInGroup[0];
                            PointCoordinates pc = pt.locationForDisplay;
                            ConvertLatLong2OSGB(pc.latitude, pc.longitude, ref m_easting, ref m_northing);
                            break;
                        }
                    }
                }

 Type gtype = srec.groupOfLocations.GetType();
                if (gtype == typeof(Point))
                {
                    Point pt = (Point)srec.groupOfLocations;
                    PointCoordinates pc = pt.locationForDisplay;
                    ConvertLatLong2OSGB(pc.latitude, pc.longitude, ref m_easting, ref m_northing);
                }

http://www.bbc.co.uk/news/blogs-trending-38173842

  Point pt = null;
                    PointCoordinates pc = null;


\\10.164.114.30\daniel.perrett\development\datexIIadapter\datexiipushadapter\SubscriberService\SubscriberWebService\bin\SubscriberWebService.dll

C:\Secure\Source\cutlas\Core\Adapters\cctvAdapter\Plugins\TycoAgent_v2\ManagedDll.tlb

C:\Secure\Source\cutlas\Core\Adapters\cctvAdapter\Plugins\TycoAgent_v2\ManagedDll.dll

C:\Secure\Source\cutlas\Core\Adapters\cctvAdapter\Plugins\TycoAgent_v2\ManagedDll.pdb

C:\cctvadapter

C:\Windows\Microsoft.NET\Framework\v4.0.30319

D:\Oracle\product\11.2.0\client_odac_1;D:\Oracle\product\11.2.0\client_odac_1\bin;D:\Oracle\product\11.2.0\dbhome_1\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\

C:\Windows\Microsoft.NET\Framework\v4.0.30319

C:\Users\Administrator\Desktop\cctvadapter

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\cctvAdapter.exe

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\TycoAgent_v2\TycoAgent_DVTel.dll

D:\Oracle\product\11.2.0\client_odac_1;D:\Oracle\product\11.2.0\client_odac_1\bin;D:\Oracle\product\11.2.0\dbhome_1\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\cctvAdapter.exe

C:\Secure\Source\cutlas\Core\ThirdParty\omniORB-4.1.3\bin\x86_win32\omniDynamic413_vc8_rt.dll

C:\cctvadapter\TycoAgent.dll

C:\cctvadapter\cctvAdapter.exe

loaded successfully

C:\Users\Daniel.Perrett\Downloads\Latitude_Update_7.0.0.5762.zip

C:\Users\Daniel.Perrett\Downloads\Latitude 7.0 Installation Package.zip

https://flir.box.com/v/Latitude7

D2V0T1e5l

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\cctvAdapter.exe

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\TycoAgent_v2\TycoAgent_DVTel.dll

C:\cctvadapter\cctvAdapter.exe

C:\cctvadapter\TycoAgent.dll

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\cctvAdapter.exe

C:\Secure\Source\cutlas\Core\Release\CCTVAdapter\TycoAgent_v2\TycoAgent_DVTel.dll

https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/

C:\Secure\SourceNew\Core\Adapter_VS10\JTAlgorithmUnitTest\example\Release

C:\Users\Administrator\Desktop\cctvadapter

93.95.10.169

NicanderClient

N1c@nd3rCl13nt

IDeviceAPI deviceAPI = cameras[cameraNum].DvtelSystem.GetAPI<IDeviceAPI>();
            IVideoInSceneEntity scene = cameras[cameraNum] as IVideoInSceneEntity;
            
            m_ptzClient = deviceAPI.AcquirePTZControl(scene);
            
            if (m_ptzClient != null)
            {           
                SubscribeToEvents(typeof(IPTZMovementEndedEventEntity), scene, Callback);
                
                m_ptzClient.GotoPresetNumber(presetnum);

m_ptzClient.NumberOfPresets

#include "stdafx.h"
#include <string>
#include <iostream>

#import ".\ManagedDll.tlb"// raw_interfaces_only


 HRESULT hr = CoInitialize(NULL);
    ITycoCCTVInterfacePtr pICalc(__uuidof(ManagedClass));

ICalculator

C:\Users\Daniel.Perrett\Documents\Visual Studio 2013\Projects

C:\Users\Daniel.Perrett\Documents\Visual Studio 2013\Projects\CalcInterface\CalcInterface\bin\Debug\CalcInterface.pdb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2013\Projects\CalcInterface\CalcInterface\bin\Debug\CalcInterface.tlb

C:\Users\Daniel.Perrett\Documents\Visual Studio 2013\Projects\CalcInterface\CalcInterface\bin\Debug\CalcInterface.dll

CalcInterface.tlb

ICalculator

using namespace ManagedDll;

CalcInterface

C:\Users\Daniel.Perrett\Documents\Visual Studio 2005\Projects\testCOMAPI

C:\Users\Administrator\Desktop\testCOMAPI\release

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll

 IPlayerAPI playerAPI = cameras[num].DvtelSystem.GetAPI<IPlayerAPI>();
                 IVideoController video = (IVideoController)playerAPI.CreateController((IDisplayableEntity)cameras[num]);

cameraNum

                    IPlayerAPI playerAPI = cameras[num].DvtelSystem.GetAPI<IPlayerAPI>();


cameraNum

controller

16257

C:\Latitude_v7.0.0.56_SDK\Samples\API\DVTel.SDK.Samples.Player

  controller.CreateSnapShot(m_savePath + "\\" + "Snapshot.bmp");

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll

Initialize

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll

volatile

    IDisplayableEntity scene = GetScene(m_entitiesListBox.SelectedItem.ToString());
            if (scene is IVideoInSceneEntity)
            {
                IPlaybackAPI playbackAPI = LoginManager.Instance.DvtelSystem.GetAPI<IPlaybackAPI>();
                Image image = playbackAPI.GetCameraPreview(scene as IVideoInSceneEntity);
                if (image != null)
                {
                    Image previewsImage = m_CameraPreviewPictureBox.Image;
                    m_CameraPreviewPictureBox.Image = image;

loggedInSystem

IPlaybackAPI

cameras[cameraNum] as IVideoInSceneEntity;

cameras

infoLog

writeToLog

loggedInSystem

writeToLog("GetSnapShot");

GetInfoLog

C:\Users\Daniel.Perrett\Documents\Visual Studio 2015\Projects\ManagedDll

  public byte[] GetSnapshot(int cameraNum)
        {

            try
            {
                if (video_controller.ContainsKey(cameraNum))
                {
                    IDisplayableEntity scene = cameras[cameraNum] as IVideoInSceneEntity;
                    if (scene is IVideoInSceneEntity)
                    {
                        IPlaybackAPI playbackAPI = loggedInSystem.GetAPI<IPlaybackAPI>();
                        writeToLog("Get a Preview");
                        Image image = playbackAPI.GetCameraPreview(scene as IVideoInSceneEntity);
                        
                        writeToLog("GetSnapShot");
                        writeToLog("Get Controller");
                        IPlayerAPI playerAPI = loggedInSystem.GetAPI<IPlayerAPI>();
                        IVideoController controller = (IVideoController)playerAPI.CreateController((IDisplayableEntity)scene);
                        writeToLog("initialise controller");
                        controller.Initialize();
                        writeToLog("create snap shot!");
                        controller.CreateSnapShot(@"c:\Temp\Snapshot.bmp");
                        writeToLog("convert to image!");
                        image = controller.GetSnapShot();
                        MemoryStream ms = new MemoryStream();
                        image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);

                        return ms.ToArray();
                    }
                }
            }
            catch(Exception ex)
            {
                logError(ex.Message);
            }

            return null;
        }

 cameras = loggedInSystem.AdministrationAPI.GetCachedEntitiesOfType(typeof(IVideoInSceneEntity), null).Values;

<!-- diagnostic response data -->
	<xsd:element name="DiagnosticData">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="tns:FaultID" 				      minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:EquipmentType" 				minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:EquipmentID" 			    minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:EquipmentSCN" 			  minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:FaultType" 			      minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:FaultSubType" 				minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:FaultDescription" 		minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:StartedTimestamp"	    minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:ClearedTimestamp" 		minOccurs="0" maxOccurs="1" />   <!-- no ClearedTimestamp indicates an active fault -->
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

DiagnosticDataLogin

DiagnosticData

DiagnosticDataArray

Field	Description
FaultID	Unique numeric reference for this fault (a database ID)
EquipmentType	Type of equipment fault (see below)
EquipmentID	Unique numeric reference of the equipment that has the fault
EquipmentSCN	Name / description of the equipment that has the fault
FaultType	Type of fault (see below)
FaultSubType	Type of sub fault (see below)
FaultDescription	Textural description of fault
StartedTimestamp	UTC timestamp of when fault occurred
ClearedTimestamp	UTC timestamp of when fault was cleared 
No ClearedTimestamp field means the fault has not yet been cleared


Type	Description
Offline	Diagnostic system is unable to communicate with the equipment
Hardware	Hardware fault
Software	Software fault
Comms	Equipment has communication issues with other parts of the system
Quality	Equipment is working but is not delivering high quality data



Field	Description
UserName	Username for secure access
UserPassword	Password for secure access
StartTimestamp	UTC timestamp of earliest diagnostic message required
EndTimestamp	UTC timestamp of latest diagnostic message required


 <xsd:element name="DiagnosticDataLogin">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element ref="tns:UserName" minOccurs="1" maxOccurs="1" />
        <xsd:element ref="tns:UserPassword" minOccurs="1" maxOccurs="1" />
        <xsd:element ref="tns:StartTimestamp" minOccurs="1" maxOccurs="1" />
        <xsd:element ref="tns:EndTimestamp" minOccurs="1" maxOccurs="1" />
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

getDiagnosticData

JTMSDiagnosticsFeed.wsdl


http://93.95.10.169:18080/JTMSDiagnosticsFeed.wsdl


wsimport -keep -extension

http://93.95.10.169:18080/JTMSDiagnosticsFeed.wsdl

service.getDiagnosticData(login);

wsimport -keep -extension

<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions name="JTMSDiagnosticsFeed" targetNamespace="http://CAJTMS.merseygateway.co.uk:8088/mockJTMSDiagnosticsFeedBinding"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://CAJTMS.merseygateway.co.uk:8088/mockJTMSDiagnosticsFeedBinding"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/">
	<wsdl:types>
		<xsd:schema targetNamespace="http://CAJTMS.merseygateway.co.uk:8088/mockJTMSDiagnosticsFeedBinding">

  <!-- request field types   -->
  <xsd:element name="UserName">
		<xsd:simpleType>
			<xsd:restriction base="xsd:string">
				<xsd:length value="32"/>
			</xsd:restriction>
		</xsd:simpleType>
	</xsd:element>
	<xsd:element name="UserPassword">
		<xsd:simpleType>
			<xsd:restriction base="xsd:string">
				<xsd:length value="32"/>
			</xsd:restriction>
		</xsd:simpleType>
	</xsd:element>
	<xsd:element name="StartTimestamp" type="xsd:dateTime" />
  <xsd:element name="EndTimestamp"   type="xsd:dateTime" />

  <!-- response field types   -->
	<xsd:element name="FaultID" 				type="xsd:unsignedLong" />
  <xsd:element name="EquipmentType">
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="Camera"    />
        <xsd:enumeration value="JTMS"      />
        <xsd:enumeration value="InStation" />
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
  <xsd:element name="EquipmentID" 		type="xsd:unsignedInt" />
  <xsd:element name="EquipmentSCN">
		<xsd:simpleType>
			<xsd:restriction base="xsd:string">
				<xsd:length value="128"/>
			</xsd:restriction>
		</xsd:simpleType>
	</xsd:element>
  <xsd:element name="FaultType">
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:enumeration value="Offline"  />
        <xsd:enumeration value="Hardware" />
        <xsd:enumeration value="Software" />
        <xsd:enumeration value="Comms"    />
        <xsd:enumeration value="Quality"  />
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
  <xsd:element name="FaultSubType" 		type="xsd:unsignedInt" />
  <xsd:element name="FaultDescription">
    <xsd:simpleType>
      <xsd:restriction base="xsd:string">
        <xsd:length value="256"/>
      </xsd:restriction>
    </xsd:simpleType>
  </xsd:element>
  <xsd:element name="StartedTimestamp" type="xsd:dateTime" />
  <xsd:element name="ClearedTimestamp"   type="xsd:dateTime" />

  <!-- diagnostic request data -->
  <xsd:element name="DiagnosticDataLogin">
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element ref="tns:UserName" minOccurs="1" maxOccurs="1" />
        <xsd:element ref="tns:UserPassword" minOccurs="1" maxOccurs="1" />
        <xsd:element ref="tns:StartTimestamp" minOccurs="1" maxOccurs="1" />
        <xsd:element ref="tns:EndTimestamp" minOccurs="1" maxOccurs="1" />
      </xsd:sequence>
    </xsd:complexType>
  </xsd:element>

  <!-- diagnostic response data -->
	<xsd:element name="DiagnosticData">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="tns:FaultID" 				      minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:EquipmentType" 				minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:EquipmentID" 			    minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:EquipmentSCN" 			  minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:FaultType" 			      minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:FaultSubType" 				minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:FaultDescription" 		minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:StartedTimestamp"	    minOccurs="1" maxOccurs="1" />
				<xsd:element ref="tns:ClearedTimestamp" 		minOccurs="0" maxOccurs="1" />   <!-- no ClearedTimestamp indicates an active fault -->
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>

  <!-- array of diagnostic response data -->
  <xsd:element name="DiagnosticDataArray">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="tns:DiagnosticData" minOccurs="0" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
		</xsd:schema>
	</wsdl:types>
	
	<wsdl:message name="DiagnosticDataRequest">
		<wsdl:part name="DiagnosticDataLogin" element="tns:DiagnosticDataLogin" />
	</wsdl:message>
	<wsdl:message name="DiagnosticDataResponse">
		<wsdl:part name="DiagnosticDataArray" element="tns:DiagnosticDataArray" />
	</wsdl:message>

	<wsdl:portType name="JTMSDiagnosticsFeedPortType">
		<wsdl:operation name="getDiagnosticData">
			<wsdl:input message="tns:DiagnosticDataRequest"></wsdl:input>
			<wsdl:output message="tns:DiagnosticDataResponse"></wsdl:output>
		</wsdl:operation>
	</wsdl:portType>

	<wsdl:binding name="JTMSDiagnosticsFeedBinding" type="tns:JTMSDiagnosticsFeedPortType">
	
 	 <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />
		<wsdl:operation name="getDiagnosticData">
		    <wsdlsoap:operation soapAction=""/>
			<soap:operation style="document" />
			<wsdl:input>
				<soap:body use="literal" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" />
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:service name="JTMSDiagnosticsFeedService">
		<wsdl:port name="JTMSDiagnosticsFeedPort" binding="tns:JTMSDiagnosticsFeedBinding">
		<wsdlsoap:address location="http://CAJTMS.merseygateway.co.uk:8088/mockJTMSDiagnosticsFeedBinding"/>
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>


JTMSDiagnosticsFeed

http://www.w3schools.com/xml/xml_soap.asp

Mahdmina, Ali - UK <ali.mahdmina@dynniq.co.uk>

Hi Dan,

1)	The playbackAPI.GetCameraPreview method is a new feature to the Latitude 7.0 SDK, that does not require you to be rendering video within the PlayerAPI controller to obtain a snapshot (The PlayerAPI controller on the other hand does require to be actively rendering the video client side, as described in item #4 of our below email). This preview image is periodically updated via infrastructure, but you do not have control over when that preview was taken. 

2)	Another alternative that is also new to the Latitude 7.0 SDK, that does not require you to actively render video client side is the Thumbnail images retrieval feature of the Recording API. This is a more versatile feature, that you may find useful if you don?t require to render video you would like to acquire snapshots for and you would like to specify specific start times and intervals.

3)	I?m attaching the Latitude SDK Release notes that covers the two items noted above in greater detail. These two features are also demonstrated within the Player sample. 

4)	Regarding the attached request for us to review/debug your code. 

a.	Please note that if the samples are working as expected, we would like to suggest you first study these working samples and introduce the associated features similarly to how they are demonstrated within the samples. 

b.	We have also made recommendations below (Items #3 & #4) that must be satisfied for your usage to work. It?s not clear from your email whether they have been addressed. 

c.	If after carefully reviewing the samples, the associated documentation (SDK Help, and attached release notes), and having incorporated our below recommendations fully you are still encountering issues, you are welcome to send a modified sample (based on the SDK samples) that illustrates the problem you are encountering by uploading the compiling solution here. Take into account that debugging/reviewing your code may be a time consuming option, that may quickly consume your available SDK support package hours, so you?ll likely only wish to take advantage of this when you are truly in need of it.

Hope the above helps, and let us know if you have any additional questions.


Thanks,
Edan Kemelman
Principal Software Engineer, Applications and Integration Center (AIC)

FLIR Systems, Inc.
65 Challenger Road, Ridgefield Park, NJ 07660 USA
Direct:  +1 201 708 9817 | Mobile: +1 201 819 2343
Email: edan.kemelman@flir.com | www.flir.com

From: Perrett, Daniel - UK [mailto:Daniel.Perrett@dynniq.co.uk] 
Sent: Thursday, December 08, 2016 11:20 AM
To: FLIR AIC <AIC@flir.com>
Subject: RE: FLIR SDK Version 7

Below is the current test code I?m using.

How come I can get a preview image?

I have pre-initialised a list of cameras as follows.

cameras = loggedInSystem.AdministrationAPI.GetCachedEntitiesOfType(typeof(IVideoInSceneEntity), null).Values;

  public byte[] GetSnapshot(int cameraNum)
        {

            try
            {
                if (video_controller.ContainsKey(cameraNum))
                {
                    IDisplayableEntity scene = cameras[cameraNum] as IVideoInSceneEntity;
                    if (scene is IVideoInSceneEntity)
                    {
                        IPlaybackAPI playbackAPI = loggedInSystem.GetAPI<IPlaybackAPI>();
                        writeToLog("Get a Preview");
                        Image image = playbackAPI.GetCameraPreview(scene as IVideoInSceneEntity); This works why?
                        
                        writeToLog("GetSnapShot");
                        writeToLog("Get Controller");
                        IPlayerAPI playerAPI = loggedInSystem.GetAPI<IPlayerAPI>();
                        IVideoController controller = (IVideoController)playerAPI.CreateController((IDisplayableEntity)scene);
                        writeToLog("initialise controller");
                        controller.Initialize();
                        writeToLog("create snap shot!");
                        controller.CreateSnapShot(@"c:\Temp\Snapshot.bmp");  This Then Fails? why
                        writeToLog("convert to image!");
                        image = controller.GetSnapShot();
                        MemoryStream ms = new MemoryStream();
                        image.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);

                        return ms.ToArray();
                    }
                }
            }
            catch(Exception ex)
            {
                logError(ex.Message);
            }

            return null;
        }

Thanks.
Dan


4250

IRecordingAPI

IThumbnailsSession.

System.Drawing.Imaging.ImageFormat.Jpeg

