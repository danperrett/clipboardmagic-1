BorderStyle = bsDialog

BorderStyle = bsDialog


BorderStyle = bsDialog

Store Message Type

Any Message Type'

SystemInformationBlockType12 c

36.413

9.2.1.44

messageIdentifier

CMAS Presidential Level Alerts

4370

 23.041

9.4.1.2.2.

TComboBox

data.cellID

data.CellVariable.length()

279673339

NumberOfStringVariables

NumberOfMessageTypeVariables

NumberOfStringVariables

NumberOfMessageTypeVariables

NumberOfStringVariables

StoreCellIDCheckBox

StoreCellIDComboBox->ItemIndex = 0;

StoreCellIDComboBox->

 for(int n = 0; n < NumberOfStringVariables; n++)
       {
           StoreCellIDComboBox->ItemIndex = n;
           char *temp = StoreCellIDComboBox->Text.c_str();
           char *temp2 = (char *)data.CellVariable.c_str();
           if(strcmp(temp, temp2) == 0)
           {
               break;
           }
       }

NumberOfMessageTypeVariables

StoreMessageTypeComboBox

 Ok->Enabled = true;

StoreCellIDCheckBox

StoreMessageTypeCheckBox->Checked

Ok->Enabled = true;

void EnableOKButton();

TWaitForAnyMessageDialog::

    if(StoreCellIDCheckBox->Checked || StoreMessageTypeCheckBox->Checked)
    {
        Ok->Enabled = true;
    }
    else
    {
        Ok->Enabled = false;
    }


EnableOKButton

attaboytv.com

  EnableOKButton();

NameTextBox->Text

VariableNameComboBox->Text

InitialValueTextBox->Text

EndValueTextBox->Text

OKButton

OKButton->Enabled = false;

m_CellIDVariableList

Cell.RATType

InitialValueTextBoxChange

(TObject *Sender);

void InitialValueTextBoxChange(TObject *Sender);

TStartSubScript::

InitialValueTextBox

VariableNameComboBox

NameTextBox

EndValueTextBox

 OKButton->Enabled = false;

void EnableOKButton();

TStartSubScript::

  if(InitialValueTextBox->Text.IsEmpty() ||
       VariableNameComboBox->Text.IsEmpty() ||
       NameTextBox->Text.IsEmpty() || 
       EndValueTextBox->Text.IsEmpty())
    {
         OKButton->Enabled = false;
    }
    else
    {

    }

OKButton->Enabled = false;

__fastcall

EnableOKButton

This is now fixed checked in under the initial IR which is linked in here  63462,:6, 7, 8

Evaluator_PreprocessExpression

PreprocessExpression

OptimalExpressionEvaluation

ExpressionReadyForEvaluation

doProcessMessage

Scheduling element

(TAU_UpdateType == 1) || (TAU_UpdateType == 2)

ScheduleSequenceElementMessage

msg.Message_Type.SubProtocol

074900500BF600F1100001010000000154064000F110000157022000

0749015AE1500BF600F1100001010000000154064000F1100001570220001300F110000B2305F412345678

m_SequenceElementsNASMobility

Attach_Accept

Tracking_Area_Update_Accept

HandleNAS_TrackingAreaUpdateAccept

EpcProcHandler_TrackingAreaUpdate

Handle_ProcedureEnded

wait for DT Event ACk

0749015AE1500BF600F1100001010000000154064000F1100001570220001300F110000B2305F412345678

Message is not the same as the element in the script

Tracking Area Update

ProcedureStarted

Tracking_Area_Update_Accept

DTEventAcknowledgeNASMobility

DTEventAcknowledgeRRC

DTEventAcknowledgeNASMobility

NASMobility_DLMessageEncoded - waiting for RRC

hold of releasing the NAS Mobility thread - until the RRC SMC and UE Capability procedures have had a chance to run

Both cases we are "NASMobility_DLMessageEncoded - waiting for RRC"

both cases have this DOWNLINK - E-Cell A - RRC_Security_Mode_Command

SecurityMode_DLMessageEncoded: Msg Received:

UL Message RRC_Security_Mode_Complete is expected on Serving Cell E-Cell A

DTEventAcknowledgeRRC

Sequence Element 6

NAS - Tracking_Area_Update_Complete

HandleDTEventReceived

m_L3ProcStatus_RRC.NextMessage

m_NASMobility_WaitingForRRC

SASDebugLogger.InfoLog("DANP: before check on m_NASMobility_WaitingForRRC");

m_NASMobility_WaitingForRRC

SASDebugLogger.InfoLog("DANP: before check on m_NASMobility_WaitingForRRC" +  string.Format("{0}", m_NASMobility_WaitingForRRC));

 SASDebugLogger.InfoLog("DANP: after check on m_NASMobility_WaitingForRRC" + string.Format("{0}", m_NASMobility_WaitingForRRC));

m_NASSession_WaitingForRRC

SASDebugLogger.InfoLog("DANP: before check on m_NASMobility_WaitingForRRC" +  string.Format("{0}", m_NASMobility_WaitingForRRC));

UE_Capability_Information

 SASDebugLogger.InfoLog(string.Format("DANP: Message is :- {0}", m_L3ProcStatus_RRC.NextMessage));

  SASDebugLogger.InfoLog("DANP: before check on m_NASMobility_WaitingForRRC" +  string.Format("{0}", m_NASMobility_WaitingForRRC));

OnChange = InitialValueTextBoxChange

68362

LPSTR

Singh, Manohar <manohar.singh@anite.com>

WM_WARNING

OnCellManagerWarning

ActivateUtraCell

WM_ACTIVATE_UTRA_CELL

ActivateUtraCell

GetDevice

SRemoteAnyMessage

ReceiveAnyLTEMessage

SetupMTCall

SRemoteAnyMessage

ReceivedGeneralNotificationFromLTE

TrxRatioCommand

Set TrxRatio

SetTrxRatio

TrxRatioCommand

RemoteTrxRatio

CTrxRatio

Num2GTrxsAvailable

DeActivateCell

S:\SAS\18 - Scripts\12 - Tools\Watermarking and Signing tool for SAS Sequencer\46.0.644

WM_ACTIVATE_CELL

ActivateCell

IsActive

ActivateUtraCell

Cell3G::Activate()

hugh@hjshipton.co.uk

Lanzarote

Cell3G::Activate()

CELLMANAGER_DEBUG

ALLOC_OK ==

 DEBUGLOG("Cell3G::Activate()")

WM_REPORT_TRXS

OnCellManagerReportTrxs

DEBUGLOG("Cell3G::Activate() Alloc OK")

Cell3G::Activate()

Cell::ReportCellInactive()

Cell3G::~Cell3G()

ReportCellInactive

WM_CELL_INACTIVE

OnCellInactive

Cell3G::~Cell3G()

Cell3G

ReportCellInactive

        DEBUGLOG("Cell3G::Activate() Insufficient Lic")

DEBUGLOG("

DEBUGLOG("OnCellInactive()");

DEBUGLOG("OnCellInactive() Utra Cell not active");

GsmCellDeactivated

 DEBUGLOG("GsmCellDeactivated()");

UpdateActiveSetForm

CellManagerInterface::Destroy()

CellManagerInterface::Destroy

CONTROL_INTERFACE::DestroyCellManager

DestroyCellManager

DEBUGLOG

ShutdownSAS

DEBUGLOG("ShutdownSAS() Calling DestroyCellManager");

TerminateThreads

DEBUGLOG("ShutdownSAS

DEBUGLOG("RemoteControllerEndRun");

OnRemoteControlRequest

RemoteEndRun

OnCellManagerTestError

DEBUGLOG("OnCellManagerTestError()");

TCommonFormControls

#ifdef DEBUG
#include "stdio.h"
#include "CReportToMMI.h"
#define DEBUGLOG(z) CallControl::DebugLog(z);
#else
#define DEBUGLOG(z)
#endif

#ifdef DEBUG
#define DEBUGLOG(z) DebugLog(z);
extern void DebugLog(AnsiString szLogMessage);
#else
#define DEBUGLOG(z)
#endif

DebugLog

OnCellInactive

OnCellManagerTestError

WM_INSUFFICIENT_TRXS

OnCellManagerTestError

Activate

WM_INSUFFICIENT_TRXS

OnCellManagerTestError

Hudson, Colin <colin.hudson@anite.com>

Singh, Manohar <manohar.singh@anite.com>

Message.Msg

uRcmiErrorRetType

TCommonFormControls::ErrorInsufficentTrxs

 if (m_pCommonFormControls->bThreadPlaybackTerminated || m_pCommonFormControls->m_PlaybackInfo.Stop || m_pCommonFormControls->m_PlaybackInfo.Pause)

EndRun(true);

TCommonFormControls::EError  uRcmiErrorRetType

   TCommonFormControls::EError  uRcmiErrorRetType = TCommonFormControls::ErrorCellManagerWarning;

James Bristow 

LoadScenarioCommand

IsInteractiveOwner

   DEBUGLOG("OnCellManagerTestError() EndRun");

Activated

m_pCommonFormControls

m_pCommonFormControls->m_PlaybackInfo

    DEBUGLOG("OnCellManagerTestError() EndRun");

m_pCommonFormControls->m_GUINamedPipe.IsInteractiveOwner()

Message.Msg

WM_INSUFFICIENT_TRXS

  TCommonFormControls::EError  uRcmiErrorRetType = TCommonFormControls::ErrorCellManagerWarning;

bIsInteractiveOwner

m_SASOwner

InteractiveScriptMode

"Status Interactive"

InteractiveScriptMode

InteractiveScriptMode =

(m_pCommonFormControls->m_SystemOptions.bNamedPipeControl)

m_pCommonFormControls->m_GUINamedPipe.IsInteractiveOwner()

IsInteractiveScript

EndRun(true);

DEBUGLOG("OnCellManagerTestError() EndRun In Playback Mode");

    DEBUGLOG("OnCellManagerTestError() EndRun because its a interactive script");

DEBUGLOG("OnCellManagerTestError() EndRun In Playback Mode");

NamedPipeManager

m_sasOwner

AskSASStatus

HostSASInsideSequencer

AskSASStatus

WaitForSASReady

